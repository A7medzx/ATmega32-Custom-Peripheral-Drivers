
ODC_AMIT_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001464  000014f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  0080007a  0080007a  00001512  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c6a  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001067  00000000  00000000  000054aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f3e  00000000  00000000  00006511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  00008450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001425  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ef0  00000000  00000000  0000a051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000cf41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_7>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	03 03       	mulsu	r16, r19
      56:	06 03       	mulsu	r16, r22
      58:	09 03       	fmul	r16, r17
      5a:	0c 03       	fmul	r16, r20
      5c:	0f 03       	fmul	r16, r23
      5e:	12 03       	mulsu	r17, r18
      60:	15 03       	mulsu	r17, r21
      62:	18 03       	fmul	r17, r16
      64:	07 63       	ori	r16, 0x37	; 55
      66:	42 36       	cpi	r20, 0x62	; 98
      68:	b7 9b       	sbis	0x16, 7	; 22
      6a:	d8 a7       	std	Y+40, r29	; 0x28
      6c:	1a 39       	cpi	r17, 0x9A	; 154
      6e:	68 56       	subi	r22, 0x68	; 104
      70:	18 ae       	std	Y+56, r1	; 0x38
      72:	ba ab       	std	Y+50, r27	; 0x32
      74:	55 8c       	ldd	r5, Z+29	; 0x1d
      76:	1d 3c       	cpi	r17, 0xCD	; 205
      78:	b7 cc       	rjmp	.-1682   	; 0xfffff9e8 <__eeprom_end+0xff7ef9e8>
      7a:	57 63       	ori	r21, 0x37	; 55
      7c:	bd 6d       	ori	r27, 0xDD	; 221
      7e:	ed fd       	.word	0xfded	; ????
      80:	75 3e       	cpi	r23, 0xE5	; 229
      82:	f6 17       	cp	r31, r22
      84:	72 31       	cpi	r23, 0x12	; 18
      86:	bf 00       	.word	0x00bf	; ????
      88:	00 00       	nop
      8a:	80 3f       	cpi	r24, 0xF0	; 240
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <prvResetNextTaskUnblockTime+0x18>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e4 e6       	ldi	r30, 0x64	; 100
      fa:	f4 e1       	ldi	r31, 0x14	; 20
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	aa 37       	cpi	r26, 0x7A	; 122
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	aa e7       	ldi	r26, 0x7A	; 122
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a0 3c       	cpi	r26, 0xC0	; 192
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
     11c:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <Control_AC_Heater>:
		_delay_ms(1000);
	}
}

void Control_AC_Heater(float temperature)
 {
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	6b 01       	movw	r12, r22
     12e:	7c 01       	movw	r14, r24
	
	if (temperature >= TEMP_THRESHOLD) {
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	40 ea       	ldi	r20, 0xA0	; 160
     136:	51 e4       	ldi	r21, 0x41	; 65
     138:	0e 94 36 07 	call	0xe6c	; 0xe6c <__gesf2>
     13c:	88 23       	and	r24, r24
     13e:	ec f0       	brlt	.+58     	; 0x17a <Control_AC_Heater+0x56>
		PORTD |= (1 << AC_PIN);
     140:	90 9a       	sbi	0x12, 0	; 18
		PORTD &= ~(1 << HEATER_PIN);
     142:	91 98       	cbi	0x12, 1	; 18
		LCD_Clear_Screen();
     144:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_Clear_Screen>
		LCD_Write_Location(ROW0,COL0);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_Write_Location>
		LCD_Write_String("Temp: ");
     150:	80 e6       	ldi	r24, 0x60	; 96
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
		LCD_Write_FloatNumber(temperature);
     158:	c7 01       	movw	r24, r14
     15a:	b6 01       	movw	r22, r12
     15c:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_Write_FloatNumber>
		LCD_Write_String(" C");
     160:	87 e6       	ldi	r24, 0x67	; 103
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
		LCD_Write_Location(ROW1,COL0);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_Write_Location>
		LCD_Write_String("AC ON");
     170:	8a e6       	ldi	r24, 0x6A	; 106
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
     178:	1c c0       	rjmp	.+56     	; 0x1b2 <Control_AC_Heater+0x8e>
		} else {
		PORTD |= (1 << HEATER_PIN);
     17a:	91 9a       	sbi	0x12, 1	; 18
		PORTD &= ~(1 << AC_PIN);
     17c:	90 98       	cbi	0x12, 0	; 18
		LCD_Clear_Screen();
     17e:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_Clear_Screen>
		LCD_Write_Location(ROW0,COL0);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_Write_Location>
		LCD_Write_String("Temp: ");
     18a:	80 e6       	ldi	r24, 0x60	; 96
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
		LCD_Write_FloatNumber(temperature);
     192:	c7 01       	movw	r24, r14
     194:	b6 01       	movw	r22, r12
     196:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_Write_FloatNumber>
		LCD_Write_String(" C");
     19a:	87 e6       	ldi	r24, 0x67	; 103
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
		LCD_Write_Location(ROW1,COL0);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_Write_Location>
		LCD_Write_String("HEATER ON");
     1aa:	80 e7       	ldi	r24, 0x70	; 112
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
	}
     1b2:	ff 90       	pop	r15
     1b4:	ef 90       	pop	r14
     1b6:	df 90       	pop	r13
     1b8:	cf 90       	pop	r12
     1ba:	08 95       	ret

000001bc <main>:
void Control_AC_Heater(float temperature);
int main(void)
{
	/* Replace with your application code */
	
	    LM35_Initialize(LM35_ADC_Avcc, LM35_ADC_PRE64);
     1bc:	66 e0       	ldi	r22, 0x06	; 6
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LM35_Initialize>
		LCD_Initialize();
     1c4:	0e 94 00 02 	call	0x400	; 0x400 <LCD_Initialize>
		
		 DDRD |= (1 << AC_PIN) | (1 << HEATER_PIN);
     1c8:	81 b3       	in	r24, 0x11	; 17
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	81 bb       	out	0x11, r24	; 17
		 PORTD &= ~(1 << AC_PIN); 
     1ce:	90 98       	cbi	0x12, 0	; 18
		 PORTD &= ~(1 << HEATER_PIN);
     1d0:	91 98       	cbi	0x12, 1	; 18
		 
		 
		float temperature = 0;
	while (1)
	{
		temperature = LM35_ReadTemperature(ADC_channel_0);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LM35_ReadTemperature>
		Control_AC_Heater(temperature);
     1d8:	0e 94 92 00 	call	0x124	; 0x124 <Control_AC_Heater>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	2f ef       	ldi	r18, 0xFF	; 255
     1de:	83 ed       	ldi	r24, 0xD3	; 211
     1e0:	90 e3       	ldi	r25, 0x30	; 48
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	80 40       	sbci	r24, 0x00	; 0
     1e6:	90 40       	sbci	r25, 0x00	; 0
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x26>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x30>
     1ec:	00 00       	nop
     1ee:	f1 cf       	rjmp	.-30     	; 0x1d2 <main+0x16>

000001f0 <reverse>:
void LCD_Write_IntegerNumber(uint32_t IntNumber)
{
	char Inum[10];
	ltoa(IntNumber, Inum, 10);//Long to Ascii
	LCD_Write_String((uint8_t*)Inum);
}
     1f0:	9b 01       	movw	r18, r22
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	31 09       	sbc	r19, r1
     1f6:	12 16       	cp	r1, r18
     1f8:	13 06       	cpc	r1, r19
     1fa:	84 f4       	brge	.+32     	; 0x21c <reverse+0x2c>
     1fc:	fc 01       	movw	r30, r24
     1fe:	e6 0f       	add	r30, r22
     200:	f7 1f       	adc	r31, r23
     202:	dc 01       	movw	r26, r24
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	4c 91       	ld	r20, X
     20a:	52 91       	ld	r21, -Z
     20c:	5d 93       	st	X+, r21
     20e:	40 83       	st	Z, r20
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	21 50       	subi	r18, 0x01	; 1
     214:	31 09       	sbc	r19, r1
     216:	82 17       	cp	r24, r18
     218:	93 07       	cpc	r25, r19
     21a:	b4 f3       	brlt	.-20     	; 0x208 <reverse+0x18>
     21c:	08 95       	ret

0000021e <intToStr>:
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	8b 01       	movw	r16, r22
     22c:	9a 01       	movw	r18, r20
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	99 f0       	breq	.+38     	; 0x258 <intToStr+0x3a>
     232:	fb 01       	movw	r30, r22
     234:	c0 e0       	ldi	r28, 0x00	; 0
     236:	d0 e0       	ldi	r29, 0x00	; 0
     238:	0f 2e       	mov	r0, r31
     23a:	fa e0       	ldi	r31, 0x0A	; 10
     23c:	ef 2e       	mov	r14, r31
     23e:	f1 2c       	mov	r15, r1
     240:	f0 2d       	mov	r31, r0
     242:	21 96       	adiw	r28, 0x01	; 1
     244:	b7 01       	movw	r22, r14
     246:	0e 94 16 0a 	call	0x142c	; 0x142c <__divmodhi4>
     24a:	80 5d       	subi	r24, 0xD0	; 208
     24c:	81 93       	st	Z+, r24
     24e:	86 2f       	mov	r24, r22
     250:	97 2f       	mov	r25, r23
     252:	00 97       	sbiw	r24, 0x00	; 0
     254:	b1 f7       	brne	.-20     	; 0x242 <intToStr+0x24>
     256:	02 c0       	rjmp	.+4      	; 0x25c <intToStr+0x3e>
     258:	c0 e0       	ldi	r28, 0x00	; 0
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	c2 17       	cp	r28, r18
     25e:	d3 07       	cpc	r29, r19
     260:	64 f4       	brge	.+24     	; 0x27a <intToStr+0x5c>
     262:	f8 01       	movw	r30, r16
     264:	ec 0f       	add	r30, r28
     266:	fd 1f       	adc	r31, r29
     268:	a8 01       	movw	r20, r16
     26a:	42 0f       	add	r20, r18
     26c:	53 1f       	adc	r21, r19
     26e:	80 e3       	ldi	r24, 0x30	; 48
     270:	81 93       	st	Z+, r24
     272:	e4 17       	cp	r30, r20
     274:	f5 07       	cpc	r31, r21
     276:	e1 f7       	brne	.-8      	; 0x270 <intToStr+0x52>
     278:	e9 01       	movw	r28, r18
     27a:	be 01       	movw	r22, r28
     27c:	c8 01       	movw	r24, r16
     27e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <reverse>
     282:	f8 01       	movw	r30, r16
     284:	ec 0f       	add	r30, r28
     286:	fd 1f       	adc	r31, r29
     288:	10 82       	st	Z, r1
     28a:	ce 01       	movw	r24, r28
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	08 95       	ret

0000029a <ftoa>:
     29a:	2f 92       	push	r2
     29c:	3f 92       	push	r3
     29e:	4f 92       	push	r4
     2a0:	5f 92       	push	r5
     2a2:	6f 92       	push	r6
     2a4:	7f 92       	push	r7
     2a6:	8f 92       	push	r8
     2a8:	9f 92       	push	r9
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	4b 01       	movw	r8, r22
     2c0:	5c 01       	movw	r10, r24
     2c2:	8a 01       	movw	r16, r20
     2c4:	e9 01       	movw	r28, r18
     2c6:	0e 94 72 06 	call	0xce4	; 0xce4 <__fixsfsi>
     2ca:	6b 01       	movw	r12, r22
     2cc:	7c 01       	movw	r14, r24
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	b8 01       	movw	r22, r16
     2d4:	c6 01       	movw	r24, r12
     2d6:	0e 94 0f 01 	call	0x21e	; 0x21e <intToStr>
     2da:	1c 01       	movw	r2, r24
     2dc:	20 97       	sbiw	r28, 0x00	; 0
     2de:	a9 f1       	breq	.+106    	; 0x34a <ftoa+0xb0>
     2e0:	f8 01       	movw	r30, r16
     2e2:	e8 0f       	add	r30, r24
     2e4:	f9 1f       	adc	r31, r25
     2e6:	8e e2       	ldi	r24, 0x2E	; 46
     2e8:	80 83       	st	Z, r24
     2ea:	be 01       	movw	r22, r28
     2ec:	0d 2e       	mov	r0, r29
     2ee:	00 0c       	add	r0, r0
     2f0:	88 0b       	sbc	r24, r24
     2f2:	99 0b       	sbc	r25, r25
     2f4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatsisf>
     2f8:	9b 01       	movw	r18, r22
     2fa:	ac 01       	movw	r20, r24
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	80 e2       	ldi	r24, 0x20	; 32
     302:	91 e4       	ldi	r25, 0x41	; 65
     304:	0e 94 a8 07 	call	0xf50	; 0xf50 <pow>
     308:	2b 01       	movw	r4, r22
     30a:	3c 01       	movw	r6, r24
     30c:	b6 01       	movw	r22, r12
     30e:	dd 0c       	add	r13, r13
     310:	88 0b       	sbc	r24, r24
     312:	99 0b       	sbc	r25, r25
     314:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatsisf>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c5 01       	movw	r24, r10
     31e:	b4 01       	movw	r22, r8
     320:	0e 94 05 06 	call	0xc0a	; 0xc0a <__subsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	28 1a       	sub	r2, r24
     32c:	38 0a       	sbc	r3, r24
     32e:	02 0d       	add	r16, r2
     330:	13 1d       	adc	r17, r3
     332:	c3 01       	movw	r24, r6
     334:	b2 01       	movw	r22, r4
     336:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     33a:	0e 94 72 06 	call	0xce4	; 0xce4 <__fixsfsi>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	ae 01       	movw	r20, r28
     344:	b8 01       	movw	r22, r16
     346:	0e 94 0f 01 	call	0x21e	; 0x21e <intToStr>
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	bf 90       	pop	r11
     35c:	af 90       	pop	r10
     35e:	9f 90       	pop	r9
     360:	8f 90       	pop	r8
     362:	7f 90       	pop	r7
     364:	6f 90       	pop	r6
     366:	5f 90       	pop	r5
     368:	4f 90       	pop	r4
     36a:	3f 90       	pop	r3
     36c:	2f 90       	pop	r2
     36e:	08 95       	ret

00000370 <LCD_Write_Command>:
     370:	cf 93       	push	r28
     372:	c8 2f       	mov	r28, r24
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	62 e0       	ldi	r22, 0x02	; 2
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	63 e0       	ldi	r22, 0x03	; 3
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     392:	8b b3       	in	r24, 0x1b	; 27
     394:	9c 2f       	mov	r25, r28
     396:	90 7f       	andi	r25, 0xF0	; 240
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	89 2b       	or	r24, r25
     39c:	8b bb       	out	0x1b, r24	; 27
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	63 e0       	ldi	r22, 0x03	; 3
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     3a8:	8f e9       	ldi	r24, 0x9F	; 159
     3aa:	9f e0       	ldi	r25, 0x0F	; 15
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_Write_Command+0x3c>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_Write_Command+0x42>
     3b2:	00 00       	nop
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	63 e0       	ldi	r22, 0x03	; 3
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     3be:	2b b3       	in	r18, 0x1b	; 27
     3c0:	30 e1       	ldi	r19, 0x10	; 16
     3c2:	c3 9f       	mul	r28, r19
     3c4:	c0 01       	movw	r24, r0
     3c6:	11 24       	eor	r1, r1
     3c8:	92 2f       	mov	r25, r18
     3ca:	9f 70       	andi	r25, 0x0F	; 15
     3cc:	89 2b       	or	r24, r25
     3ce:	8b bb       	out	0x1b, r24	; 27
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	63 e0       	ldi	r22, 0x03	; 3
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     3da:	8f e9       	ldi	r24, 0x9F	; 159
     3dc:	9f e0       	ldi	r25, 0x0F	; 15
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_Write_Command+0x6e>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_Write_Command+0x74>
     3e4:	00 00       	nop
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	63 e0       	ldi	r22, 0x03	; 3
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     3f0:	8f e3       	ldi	r24, 0x3F	; 63
     3f2:	9f e1       	ldi	r25, 0x1F	; 31
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_Write_Command+0x84>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_Write_Command+0x8a>
     3fa:	00 00       	nop
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <LCD_Initialize>:
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	64 e0       	ldi	r22, 0x04	; 4
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	65 e0       	ldi	r22, 0x05	; 5
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	66 e0       	ldi	r22, 0x06	; 6
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     428:	41 e0       	ldi	r20, 0x01	; 1
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	62 e0       	ldi	r22, 0x02	; 2
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 23 03 	call	0x646	; 0x646 <DIO_SetPinDirection>
     446:	83 e3       	ldi	r24, 0x33	; 51
     448:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     452:	88 e2       	ldi	r24, 0x28	; 40
     454:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     46a:	8c e0       	ldi	r24, 0x0C	; 12
     46c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     470:	8f e3       	ldi	r24, 0x3F	; 63
     472:	9f e1       	ldi	r25, 0x1F	; 31
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <LCD_Initialize+0x74>
     478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_Initialize+0x7a>
     47a:	00 00       	nop
     47c:	08 95       	ret

0000047e <LCD_Clear_Screen>:
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     484:	08 95       	ret

00000486 <LCD_Write_Character>:
     486:	cf 93       	push	r28
     488:	c8 2f       	mov	r28, r24
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	63 e0       	ldi	r22, 0x03	; 3
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     4a8:	8b b3       	in	r24, 0x1b	; 27
     4aa:	9c 2f       	mov	r25, r28
     4ac:	90 7f       	andi	r25, 0xF0	; 240
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	89 2b       	or	r24, r25
     4b2:	8b bb       	out	0x1b, r24	; 27
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	63 e0       	ldi	r22, 0x03	; 3
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     4be:	8f e9       	ldi	r24, 0x9F	; 159
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_Write_Character+0x3c>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_Write_Character+0x42>
     4c8:	00 00       	nop
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     4d4:	2b b3       	in	r18, 0x1b	; 27
     4d6:	30 e1       	ldi	r19, 0x10	; 16
     4d8:	c3 9f       	mul	r28, r19
     4da:	c0 01       	movw	r24, r0
     4dc:	11 24       	eor	r1, r1
     4de:	92 2f       	mov	r25, r18
     4e0:	9f 70       	andi	r25, 0x0F	; 15
     4e2:	89 2b       	or	r24, r25
     4e4:	8b bb       	out	0x1b, r24	; 27
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	63 e0       	ldi	r22, 0x03	; 3
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     4f0:	8f e9       	ldi	r24, 0x9F	; 159
     4f2:	9f e0       	ldi	r25, 0x0F	; 15
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_Write_Character+0x6e>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_Write_Character+0x74>
     4fa:	00 00       	nop
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	63 e0       	ldi	r22, 0x03	; 3
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 94 03 	call	0x728	; 0x728 <DIO_SetPinValue>
     506:	8f e3       	ldi	r24, 0x3F	; 63
     508:	9f e1       	ldi	r25, 0x1F	; 31
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_Write_Character+0x84>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_Write_Character+0x8a>
     510:	00 00       	nop
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <LCD_Write_String>:
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	88 81       	ld	r24, Y
     51e:	88 23       	and	r24, r24
     520:	61 f0       	breq	.+24     	; 0x53a <LCD_Write_String+0x24>
     522:	21 96       	adiw	r28, 0x01	; 1
     524:	0e 94 43 02 	call	0x486	; 0x486 <LCD_Write_Character>
     528:	8f e3       	ldi	r24, 0x3F	; 63
     52a:	9c e9       	ldi	r25, 0x9C	; 156
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_Write_String+0x16>
     530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_Write_String+0x1c>
     532:	00 00       	nop
     534:	89 91       	ld	r24, Y+
     536:	81 11       	cpse	r24, r1
     538:	f5 cf       	rjmp	.-22     	; 0x524 <LCD_Write_String+0xe>
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <LCD_Write_FloatNumber>:
void LCD_Write_FloatNumber(fint32_t FltNumber)
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	2a 97       	sbiw	r28, 0x0a	; 10
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	char Fnum[10];
	ftoa(FltNumber, Fnum, 3);//Float to Ascii
     554:	23 e0       	ldi	r18, 0x03	; 3
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	ae 01       	movw	r20, r28
     55a:	4f 5f       	subi	r20, 0xFF	; 255
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	0e 94 4d 01 	call	0x29a	; 0x29a <ftoa>
	LCD_Write_String((uint8_t*)Fnum);
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Write_String>
}
     56a:	2a 96       	adiw	r28, 0x0a	; 10
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <LCD_Write_Location>:
void LCD_Write_Location(row Rows, column Columns)
{
	uint8_t location = 0;
	switch(Rows)
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	49 f0       	breq	.+18     	; 0x592 <LCD_Write_Location+0x16>
     580:	28 f0       	brcs	.+10     	; 0x58c <LCD_Write_Location+0x10>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	49 f0       	breq	.+18     	; 0x598 <LCD_Write_Location+0x1c>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	51 f0       	breq	.+20     	; 0x59e <LCD_Write_Location+0x22>
     58a:	0c c0       	rjmp	.+24     	; 0x5a4 <LCD_Write_Location+0x28>
	{
		case ROW0:
		location = 0x80 + Columns;
     58c:	80 e8       	ldi	r24, 0x80	; 128
     58e:	86 0f       	add	r24, r22
		break;
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <LCD_Write_Location+0x2a>
		case ROW1:
		location = 0xC0 + Columns;
     592:	80 ec       	ldi	r24, 0xC0	; 192
     594:	86 0f       	add	r24, r22
		break;
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <LCD_Write_Location+0x2a>
		case ROW2:
		location = 0x94 + Columns;
     598:	84 e9       	ldi	r24, 0x94	; 148
     59a:	86 0f       	add	r24, r22
		break;
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <LCD_Write_Location+0x2a>
		case ROW3:
		location = 0xD4 + Columns;
     59e:	84 ed       	ldi	r24, 0xD4	; 212
     5a0:	86 0f       	add	r24, r22
		break;
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <LCD_Write_Location+0x2a>
	ftoa(FltNumber, Fnum, 3);//Float to Ascii
	LCD_Write_String((uint8_t*)Fnum);
}
void LCD_Write_Location(row Rows, column Columns)
{
	uint8_t location = 0;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ROW3:
		location = 0xD4 + Columns;
		break;
	}
	LCD_Write_Command(location);
     5a6:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_Write_Command>
     5aa:	08 95       	ret

000005ac <LM35_Initialize>:

#include "LM35_SENSOR_Interface.h"

void LM35_Initialize(lm35_adc_vref vref, lm35_adc_prescaler prescaler)
{
	ADC_Initialize_WithoutInterrupt(vref, prescaler);
     5ac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ADC_Initialize_WithoutInterrupt>
     5b0:	08 95       	ret

000005b2 <LM35_ReadTemperature>:
}

float LM35_ReadTemperature(adc_channel channel)
{
	uint16_t ADC_Value = ADC_Read(channel);
     5b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ADC_Read>
	
	float temperature = (ADC_Value * LM35_VOLTAGE_REF / LM35_ADC_MAX_VALUE) * LM35_CONVERSION_FACTOR;
     5b6:	bc 01       	movw	r22, r24
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 a8 06 	call	0xd50	; 0xd50 <__floatunsisf>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 ea       	ldi	r20, 0xA0	; 160
     5c6:	50 e4       	ldi	r21, 0x40	; 64
     5c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5a e3       	ldi	r21, 0x3A	; 58
     5d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	48 ec       	ldi	r20, 0xC8	; 200
     5de:	52 e4       	ldi	r21, 0x42	; 66
     5e0:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
	
	return round(temperature);
     5e4:	0e 94 f8 07 	call	0xff0	; 0xff0 <round>
}
     5e8:	08 95       	ret

000005ea <ADC_Initialize_WithoutInterrupt>:
	3- Auto-Trigger
	4- Right adjust
	5- Enable peripheral interrupt
	*/
	_ADC_ADMUX  = 0x40;  //0b 0100 0000
	_ADC_ADCSRA = 0xAF;  //0b 1010 1111
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	87 b9       	out	0x07, r24	; 7
     5ee:	87 ea       	ldi	r24, 0xA7	; 167
     5f0:	86 b9       	out	0x06, r24	; 6
     5f2:	08 95       	ret

000005f4 <ADC_Read>:
		3- Start conversion
		4- Wait until end conversion
		5- Return reading
	*/
	uint16_t ADC_read = 0;
	switch (channel)
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	91 05       	cpc	r25, r1
     5fa:	e8 f4       	brcc	.+58     	; 0x636 <ADC_Read+0x42>
     5fc:	fc 01       	movw	r30, r24
     5fe:	e6 5d       	subi	r30, 0xD6	; 214
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__tablejump2__>
	{
		case ADC_channel_0:
		_ADC_ADMUX = 0x40;//0b 010 00000
     606:	80 e4       	ldi	r24, 0x40	; 64
     608:	87 b9       	out	0x07, r24	; 7
		break;
     60a:	17 c0       	rjmp	.+46     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_1:
		_ADC_ADMUX = 0x41;//0b 010 00001
     60c:	81 e4       	ldi	r24, 0x41	; 65
     60e:	87 b9       	out	0x07, r24	; 7
		break;
     610:	14 c0       	rjmp	.+40     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_2:
		_ADC_ADMUX = 0x42;//0b 010 00010
     612:	82 e4       	ldi	r24, 0x42	; 66
     614:	87 b9       	out	0x07, r24	; 7
		break;
     616:	11 c0       	rjmp	.+34     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_3:
		_ADC_ADMUX = 0x43;//0b 010 00011
     618:	83 e4       	ldi	r24, 0x43	; 67
     61a:	87 b9       	out	0x07, r24	; 7
		break;
     61c:	0e c0       	rjmp	.+28     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_4:
		_ADC_ADMUX = 0x44;//0b 010 00100
     61e:	84 e4       	ldi	r24, 0x44	; 68
     620:	87 b9       	out	0x07, r24	; 7
		break;
     622:	0b c0       	rjmp	.+22     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_5:
		_ADC_ADMUX = 0x45;//0b 010 00101
     624:	85 e4       	ldi	r24, 0x45	; 69
     626:	87 b9       	out	0x07, r24	; 7
		break;
     628:	08 c0       	rjmp	.+16     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_6:
		_ADC_ADMUX = 0x46;//0b 010 00110
     62a:	86 e4       	ldi	r24, 0x46	; 70
     62c:	87 b9       	out	0x07, r24	; 7
		break;
     62e:	05 c0       	rjmp	.+10     	; 0x63a <ADC_Read+0x46>
		case ADC_channel_7:
		_ADC_ADMUX = 0x47;//0b 0100 0111
     630:	87 e4       	ldi	r24, 0x47	; 71
     632:	87 b9       	out	0x07, r24	; 7
		break;
     634:	02 c0       	rjmp	.+4      	; 0x63a <ADC_Read+0x46>
		default:
		_ADC_ADMUX = 0x40;
     636:	80 e4       	ldi	r24, 0x40	; 64
     638:	87 b9       	out	0x07, r24	; 7
		break;
	}
	_ADC_ADCSRA |= (1<<ADSC);
     63a:	36 9a       	sbi	0x06, 6	; 6
	while (GET_BIT(_ADC_ADCSRA, ADIF) != 1);
     63c:	34 9b       	sbis	0x06, 4	; 6
     63e:	fe cf       	rjmp	.-4      	; 0x63c <ADC_Read+0x48>
	ADC_read = _ADC_DATA;
     640:	84 b1       	in	r24, 0x04	; 4
     642:	95 b1       	in	r25, 0x05	; 5
	return ADC_read;
     644:	08 95       	ret

00000646 <DIO_SetPinDirection>:
*/
#include "DIO_Interface.h"

void DIO_SetPinDirection(dioPort port, dioPin pin, dioState state)
{
	switch(state)
     646:	44 23       	and	r20, r20
     648:	19 f0       	breq	.+6      	; 0x650 <DIO_SetPinDirection+0xa>
     64a:	41 30       	cpi	r20, 0x01	; 1
     64c:	c9 f1       	breq	.+114    	; 0x6c0 <DIO_SetPinDirection+0x7a>
     64e:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	91 f0       	breq	.+36     	; 0x678 <DIO_SetPinDirection+0x32>
     654:	28 f0       	brcs	.+10     	; 0x660 <DIO_SetPinDirection+0x1a>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	d9 f0       	breq	.+54     	; 0x690 <DIO_SetPinDirection+0x4a>
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	29 f1       	breq	.+74     	; 0x6a8 <DIO_SetPinDirection+0x62>
     65e:	08 95       	ret
		{
			case DIO_PORTA: CLR_BIT(_DIO_DDRA, pin); break;
     660:	2a b3       	in	r18, 0x1a	; 26
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_SetPinDirection+0x26>
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	6a 95       	dec	r22
     66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_SetPinDirection+0x22>
     670:	80 95       	com	r24
     672:	82 23       	and	r24, r18
     674:	8a bb       	out	0x1a, r24	; 26
     676:	08 95       	ret
			case DIO_PORTB: CLR_BIT(_DIO_DDRB, pin); break;
     678:	27 b3       	in	r18, 0x17	; 23
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_SetPinDirection+0x3e>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	6a 95       	dec	r22
     686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_SetPinDirection+0x3a>
     688:	80 95       	com	r24
     68a:	82 23       	and	r24, r18
     68c:	87 bb       	out	0x17, r24	; 23
     68e:	08 95       	ret
			case DIO_PORTC: CLR_BIT(_DIO_DDRC, pin); break;
     690:	24 b3       	in	r18, 0x14	; 20
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_SetPinDirection+0x56>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	6a 95       	dec	r22
     69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_SetPinDirection+0x52>
     6a0:	80 95       	com	r24
     6a2:	82 23       	and	r24, r18
     6a4:	84 bb       	out	0x14, r24	; 20
     6a6:	08 95       	ret
			case DIO_PORTD: CLR_BIT(_DIO_DDRD, pin); break;
     6a8:	21 b3       	in	r18, 0x11	; 17
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinDirection+0x6e>
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	6a 95       	dec	r22
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SetPinDirection+0x6a>
     6b8:	80 95       	com	r24
     6ba:	82 23       	and	r24, r18
     6bc:	81 bb       	out	0x11, r24	; 17
     6be:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	89 f0       	breq	.+34     	; 0x6e6 <DIO_SetPinDirection+0xa0>
     6c4:	28 f0       	brcs	.+10     	; 0x6d0 <DIO_SetPinDirection+0x8a>
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	c9 f0       	breq	.+50     	; 0x6fc <DIO_SetPinDirection+0xb6>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	11 f1       	breq	.+68     	; 0x712 <DIO_SetPinDirection+0xcc>
     6ce:	08 95       	ret
		{
			case DIO_PORTA: SET_BIT(_DIO_DDRA, pin); break;
     6d0:	2a b3       	in	r18, 0x1a	; 26
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_SetPinDirection+0x96>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	6a 95       	dec	r22
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_SetPinDirection+0x92>
     6e0:	82 2b       	or	r24, r18
     6e2:	8a bb       	out	0x1a, r24	; 26
     6e4:	08 95       	ret
			case DIO_PORTB: SET_BIT(_DIO_DDRB, pin); break;
     6e6:	27 b3       	in	r18, 0x17	; 23
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_SetPinDirection+0xac>
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	6a 95       	dec	r22
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_SetPinDirection+0xa8>
     6f6:	82 2b       	or	r24, r18
     6f8:	87 bb       	out	0x17, r24	; 23
     6fa:	08 95       	ret
			case DIO_PORTC: SET_BIT(_DIO_DDRC, pin); break;
     6fc:	24 b3       	in	r18, 0x14	; 20
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_SetPinDirection+0xc2>
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	6a 95       	dec	r22
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_SetPinDirection+0xbe>
     70c:	82 2b       	or	r24, r18
     70e:	84 bb       	out	0x14, r24	; 20
     710:	08 95       	ret
			case DIO_PORTD: SET_BIT(_DIO_DDRD, pin); break;
     712:	21 b3       	in	r18, 0x11	; 17
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_SetPinDirection+0xd8>
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	6a 95       	dec	r22
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_SetPinDirection+0xd4>
     722:	82 2b       	or	r24, r18
     724:	81 bb       	out	0x11, r24	; 17
     726:	08 95       	ret

00000728 <DIO_SetPinValue>:
	}
}

void DIO_SetPinValue(dioPort port, dioPin pin, dioStatus status)
{
	switch(status)
     728:	44 23       	and	r20, r20
     72a:	19 f0       	breq	.+6      	; 0x732 <DIO_SetPinValue+0xa>
     72c:	41 30       	cpi	r20, 0x01	; 1
     72e:	c9 f1       	breq	.+114    	; 0x7a2 <DIO_SetPinValue+0x7a>
     730:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	91 f0       	breq	.+36     	; 0x75a <DIO_SetPinValue+0x32>
     736:	28 f0       	brcs	.+10     	; 0x742 <DIO_SetPinValue+0x1a>
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	d9 f0       	breq	.+54     	; 0x772 <DIO_SetPinValue+0x4a>
     73c:	83 30       	cpi	r24, 0x03	; 3
     73e:	29 f1       	breq	.+74     	; 0x78a <DIO_SetPinValue+0x62>
     740:	08 95       	ret
		{
			case DIO_PORTA: CLR_BIT(_DIO_PORTA, pin); break;
     742:	2b b3       	in	r18, 0x1b	; 27
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_SetPinValue+0x26>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	6a 95       	dec	r22
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_SetPinValue+0x22>
     752:	80 95       	com	r24
     754:	82 23       	and	r24, r18
     756:	8b bb       	out	0x1b, r24	; 27
     758:	08 95       	ret
			case DIO_PORTB: CLR_BIT(_DIO_PORTB, pin); break;
     75a:	28 b3       	in	r18, 0x18	; 24
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_SetPinValue+0x3e>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	6a 95       	dec	r22
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_SetPinValue+0x3a>
     76a:	80 95       	com	r24
     76c:	82 23       	and	r24, r18
     76e:	88 bb       	out	0x18, r24	; 24
     770:	08 95       	ret
			case DIO_PORTC: CLR_BIT(_DIO_PORTC, pin); break;
     772:	25 b3       	in	r18, 0x15	; 21
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_SetPinValue+0x56>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	6a 95       	dec	r22
     780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_SetPinValue+0x52>
     782:	80 95       	com	r24
     784:	82 23       	and	r24, r18
     786:	85 bb       	out	0x15, r24	; 21
     788:	08 95       	ret
			case DIO_PORTD: CLR_BIT(_DIO_PORTD, pin); break;
     78a:	22 b3       	in	r18, 0x12	; 18
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_SetPinValue+0x6e>
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	6a 95       	dec	r22
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_SetPinValue+0x6a>
     79a:	80 95       	com	r24
     79c:	82 23       	and	r24, r18
     79e:	82 bb       	out	0x12, r24	; 18
     7a0:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	89 f0       	breq	.+34     	; 0x7c8 <DIO_SetPinValue+0xa0>
     7a6:	28 f0       	brcs	.+10     	; 0x7b2 <DIO_SetPinValue+0x8a>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	c9 f0       	breq	.+50     	; 0x7de <DIO_SetPinValue+0xb6>
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	11 f1       	breq	.+68     	; 0x7f4 <DIO_SetPinValue+0xcc>
     7b0:	08 95       	ret
		{
			case DIO_PORTA: SET_BIT(_DIO_PORTA, pin); break;
     7b2:	2b b3       	in	r18, 0x1b	; 27
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_SetPinValue+0x96>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	6a 95       	dec	r22
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_SetPinValue+0x92>
     7c2:	82 2b       	or	r24, r18
     7c4:	8b bb       	out	0x1b, r24	; 27
     7c6:	08 95       	ret
			case DIO_PORTB: SET_BIT(_DIO_PORTB, pin); break;
     7c8:	28 b3       	in	r18, 0x18	; 24
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_SetPinValue+0xac>
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	6a 95       	dec	r22
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_SetPinValue+0xa8>
     7d8:	82 2b       	or	r24, r18
     7da:	88 bb       	out	0x18, r24	; 24
     7dc:	08 95       	ret
			case DIO_PORTC: SET_BIT(_DIO_PORTC, pin); break;
     7de:	25 b3       	in	r18, 0x15	; 21
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <DIO_SetPinValue+0xc2>
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	6a 95       	dec	r22
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <DIO_SetPinValue+0xbe>
     7ee:	82 2b       	or	r24, r18
     7f0:	85 bb       	out	0x15, r24	; 21
     7f2:	08 95       	ret
			case DIO_PORTD: SET_BIT(_DIO_PORTD, pin); break;
     7f4:	22 b3       	in	r18, 0x12	; 18
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <DIO_SetPinValue+0xd8>
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	6a 95       	dec	r22
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_SetPinValue+0xd4>
     804:	82 2b       	or	r24, r18
     806:	82 bb       	out	0x12, r24	; 18
     808:	08 95       	ret

0000080a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	0f 92       	push	r0
     812:	1f 92       	push	r1
     814:	11 24       	eor	r1, r1
     816:	2f 92       	push	r2
     818:	3f 92       	push	r3
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
     852:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <pxCurrentTCB>
     856:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     85a:	0d b6       	in	r0, 0x3d	; 61
     85c:	0d 92       	st	X+, r0
     85e:	0e b6       	in	r0, 0x3e	; 62
     860:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     862:	0e 94 80 04 	call	0x900	; 0x900 <xTaskIncrementTick>
     866:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     868:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     86c:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <pxCurrentTCB>
     870:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     874:	cd 91       	ld	r28, X+
     876:	cd bf       	out	0x3d, r28	; 61
     878:	dd 91       	ld	r29, X+
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	5f 90       	pop	r5
     8b2:	4f 90       	pop	r4
     8b4:	3f 90       	pop	r3
     8b6:	2f 90       	pop	r2
     8b8:	1f 90       	pop	r1
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8c0:	08 95       	ret

000008c2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8c2:	0e 94 05 04 	call	0x80a	; 0x80a <vPortYieldFromTick>
		asm volatile ( "reti" );
     8c6:	18 95       	reti

000008c8 <prvResetNextTaskUnblockTime>:
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     8c8:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <pxDelayedTaskList>
     8cc:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <pxDelayedTaskList+0x1>
     8d0:	80 81       	ld	r24, Z
     8d2:	81 11       	cpse	r24, r1
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <prvResetNextTaskUnblockTime+0x1c>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <xNextTaskUnblockTime+0x1>
     8de:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <xNextTaskUnblockTime>
     8e2:	08 95       	ret
     8e4:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <pxDelayedTaskList>
     8e8:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <pxDelayedTaskList+0x1>
     8ec:	05 80       	ldd	r0, Z+5	; 0x05
     8ee:	f6 81       	ldd	r31, Z+6	; 0x06
     8f0:	e0 2d       	mov	r30, r0
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <xNextTaskUnblockTime+0x1>
     8fa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <xNextTaskUnblockTime>
     8fe:	08 95       	ret

00000900 <xTaskIncrementTick>:
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     910:	81 11       	cpse	r24, r1
     912:	04 c1       	rjmp	.+520    	; 0xb1c <xTaskIncrementTick+0x21c>
     914:	c0 91 82 00 	lds	r28, 0x0082	; 0x800082 <xTickCount>
     918:	d0 91 83 00 	lds	r29, 0x0083	; 0x800083 <xTickCount+0x1>
     91c:	7e 01       	movw	r14, r28
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	e8 1a       	sub	r14, r24
     922:	f8 0a       	sbc	r15, r24
     924:	f0 92 83 00 	sts	0x0083, r15	; 0x800083 <xTickCount+0x1>
     928:	e0 92 82 00 	sts	0x0082, r14	; 0x800082 <xTickCount>
     92c:	e1 14       	cp	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	b9 f4       	brne	.+46     	; 0x960 <xTaskIncrementTick+0x60>
     932:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <pxDelayedTaskList>
     936:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <pxDelayedTaskList+0x1>
     93a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <pxOverflowDelayedTaskList>
     93e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <pxOverflowDelayedTaskList+0x1>
     942:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <pxDelayedTaskList+0x1>
     946:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <pxDelayedTaskList>
     94a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <pxOverflowDelayedTaskList+0x1>
     94e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <pxOverflowDelayedTaskList>
     952:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <xNumOfOverflows>
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <xNumOfOverflows>
     95c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <prvResetNextTaskUnblockTime>
     960:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <xNextTaskUnblockTime>
     964:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <xNextTaskUnblockTime+0x1>
     968:	e8 16       	cp	r14, r24
     96a:	f9 06       	cpc	r15, r25
     96c:	10 f4       	brcc	.+4      	; 0x972 <xTaskIncrementTick+0x72>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	b9 c0       	rjmp	.+370    	; 0xae4 <xTaskIncrementTick+0x1e4>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <pxDelayedTaskList>
     97a:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <pxDelayedTaskList+0x1>
     97e:	90 81       	ld	r25, Z
     980:	91 11       	cpse	r25, r1
     982:	07 c0       	rjmp	.+14     	; 0x992 <xTaskIncrementTick+0x92>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <xNextTaskUnblockTime+0x1>
     98c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <xNextTaskUnblockTime>
     990:	a9 c0       	rjmp	.+338    	; 0xae4 <xTaskIncrementTick+0x1e4>
     992:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <pxDelayedTaskList>
     996:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <pxDelayedTaskList+0x1>
     99a:	05 80       	ldd	r0, Z+5	; 0x05
     99c:	f6 81       	ldd	r31, Z+6	; 0x06
     99e:	e0 2d       	mov	r30, r0
     9a0:	06 80       	ldd	r0, Z+6	; 0x06
     9a2:	f7 81       	ldd	r31, Z+7	; 0x07
     9a4:	e0 2d       	mov	r30, r0
     9a6:	22 81       	ldd	r18, Z+2	; 0x02
     9a8:	33 81       	ldd	r19, Z+3	; 0x03
     9aa:	e2 16       	cp	r14, r18
     9ac:	f3 06       	cpc	r15, r19
     9ae:	28 f4       	brcc	.+10     	; 0x9ba <xTaskIncrementTick+0xba>
     9b0:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <xNextTaskUnblockTime+0x1>
     9b4:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <xNextTaskUnblockTime>
     9b8:	95 c0       	rjmp	.+298    	; 0xae4 <xTaskIncrementTick+0x1e4>
     9ba:	a2 85       	ldd	r26, Z+10	; 0x0a
     9bc:	b3 85       	ldd	r27, Z+11	; 0x0b
     9be:	24 81       	ldd	r18, Z+4	; 0x04
     9c0:	35 81       	ldd	r19, Z+5	; 0x05
     9c2:	46 81       	ldd	r20, Z+6	; 0x06
     9c4:	57 81       	ldd	r21, Z+7	; 0x07
     9c6:	e9 01       	movw	r28, r18
     9c8:	5d 83       	std	Y+5, r21	; 0x05
     9ca:	4c 83       	std	Y+4, r20	; 0x04
     9cc:	26 81       	ldd	r18, Z+6	; 0x06
     9ce:	37 81       	ldd	r19, Z+7	; 0x07
     9d0:	44 81       	ldd	r20, Z+4	; 0x04
     9d2:	55 81       	ldd	r21, Z+5	; 0x05
     9d4:	e9 01       	movw	r28, r18
     9d6:	5b 83       	std	Y+3, r21	; 0x03
     9d8:	4a 83       	std	Y+2, r20	; 0x02
     9da:	af 01       	movw	r20, r30
     9dc:	4e 5f       	subi	r20, 0xFE	; 254
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	2d 91       	ld	r18, X+
     9e4:	3c 91       	ld	r19, X
     9e6:	12 97       	sbiw	r26, 0x02	; 2
     9e8:	24 17       	cp	r18, r20
     9ea:	35 07       	cpc	r19, r21
     9ec:	31 f4       	brne	.+12     	; 0x9fa <xTaskIncrementTick+0xfa>
     9ee:	26 81       	ldd	r18, Z+6	; 0x06
     9f0:	37 81       	ldd	r19, Z+7	; 0x07
     9f2:	12 96       	adiw	r26, 0x02	; 2
     9f4:	3c 93       	st	X, r19
     9f6:	2e 93       	st	-X, r18
     9f8:	11 97       	sbiw	r26, 0x01	; 1
     9fa:	13 86       	std	Z+11, r1	; 0x0b
     9fc:	12 86       	std	Z+10, r1	; 0x0a
     9fe:	9c 91       	ld	r25, X
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	a4 89       	ldd	r26, Z+20	; 0x14
     a06:	b5 89       	ldd	r27, Z+21	; 0x15
     a08:	10 97       	sbiw	r26, 0x00	; 0
     a0a:	19 f1       	breq	.+70     	; 0xa52 <xTaskIncrementTick+0x152>
     a0c:	26 85       	ldd	r18, Z+14	; 0x0e
     a0e:	37 85       	ldd	r19, Z+15	; 0x0f
     a10:	00 89       	ldd	r16, Z+16	; 0x10
     a12:	11 89       	ldd	r17, Z+17	; 0x11
     a14:	e9 01       	movw	r28, r18
     a16:	1d 83       	std	Y+5, r17	; 0x05
     a18:	0c 83       	std	Y+4, r16	; 0x04
     a1a:	20 89       	ldd	r18, Z+16	; 0x10
     a1c:	31 89       	ldd	r19, Z+17	; 0x11
     a1e:	06 85       	ldd	r16, Z+14	; 0x0e
     a20:	17 85       	ldd	r17, Z+15	; 0x0f
     a22:	e9 01       	movw	r28, r18
     a24:	1b 83       	std	Y+3, r17	; 0x03
     a26:	0a 83       	std	Y+2, r16	; 0x02
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	0d 91       	ld	r16, X+
     a2c:	1c 91       	ld	r17, X
     a2e:	12 97       	sbiw	r26, 0x02	; 2
     a30:	9f 01       	movw	r18, r30
     a32:	24 5f       	subi	r18, 0xF4	; 244
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	02 17       	cp	r16, r18
     a38:	13 07       	cpc	r17, r19
     a3a:	31 f4       	brne	.+12     	; 0xa48 <xTaskIncrementTick+0x148>
     a3c:	20 89       	ldd	r18, Z+16	; 0x10
     a3e:	31 89       	ldd	r19, Z+17	; 0x11
     a40:	12 96       	adiw	r26, 0x02	; 2
     a42:	3c 93       	st	X, r19
     a44:	2e 93       	st	-X, r18
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	15 8a       	std	Z+21, r1	; 0x15
     a4a:	14 8a       	std	Z+20, r1	; 0x14
     a4c:	9c 91       	ld	r25, X
     a4e:	91 50       	subi	r25, 0x01	; 1
     a50:	9c 93       	st	X, r25
     a52:	26 89       	ldd	r18, Z+22	; 0x16
     a54:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uxTopReadyPriority>
     a58:	92 17       	cp	r25, r18
     a5a:	10 f4       	brcc	.+4      	; 0xa60 <xTaskIncrementTick+0x160>
     a5c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <uxTopReadyPriority>
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	d9 01       	movw	r26, r18
     a64:	aa 0f       	add	r26, r26
     a66:	bb 1f       	adc	r27, r27
     a68:	aa 0f       	add	r26, r26
     a6a:	bb 1f       	adc	r27, r27
     a6c:	aa 0f       	add	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	2a 0f       	add	r18, r26
     a72:	3b 1f       	adc	r19, r27
     a74:	d9 01       	movw	r26, r18
     a76:	a8 57       	subi	r26, 0x78	; 120
     a78:	bf 4f       	sbci	r27, 0xFF	; 255
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	0d 90       	ld	r0, X+
     a7e:	bc 91       	ld	r27, X
     a80:	a0 2d       	mov	r26, r0
     a82:	b5 83       	std	Z+5, r27	; 0x05
     a84:	a4 83       	std	Z+4, r26	; 0x04
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	2d 91       	ld	r18, X+
     a8a:	3c 91       	ld	r19, X
     a8c:	15 97       	sbiw	r26, 0x05	; 5
     a8e:	37 83       	std	Z+7, r19	; 0x07
     a90:	26 83       	std	Z+6, r18	; 0x06
     a92:	14 96       	adiw	r26, 0x04	; 4
     a94:	2d 91       	ld	r18, X+
     a96:	3c 91       	ld	r19, X
     a98:	15 97       	sbiw	r26, 0x05	; 5
     a9a:	e9 01       	movw	r28, r18
     a9c:	5b 83       	std	Y+3, r21	; 0x03
     a9e:	4a 83       	std	Y+2, r20	; 0x02
     aa0:	15 96       	adiw	r26, 0x05	; 5
     aa2:	5c 93       	st	X, r21
     aa4:	4e 93       	st	-X, r20
     aa6:	14 97       	sbiw	r26, 0x04	; 4
     aa8:	a6 89       	ldd	r26, Z+22	; 0x16
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	9d 01       	movw	r18, r26
     aae:	22 0f       	add	r18, r18
     ab0:	33 1f       	adc	r19, r19
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	a2 0f       	add	r26, r18
     abc:	b3 1f       	adc	r27, r19
     abe:	a8 57       	subi	r26, 0x78	; 120
     ac0:	bf 4f       	sbci	r27, 0xFF	; 255
     ac2:	b3 87       	std	Z+11, r27	; 0x0b
     ac4:	a2 87       	std	Z+10, r26	; 0x0a
     ac6:	9c 91       	ld	r25, X
     ac8:	9f 5f       	subi	r25, 0xFF	; 255
     aca:	9c 93       	st	X, r25
     acc:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <pxCurrentTCB>
     ad0:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     ad4:	26 89       	ldd	r18, Z+22	; 0x16
     ad6:	56 96       	adiw	r26, 0x16	; 22
     ad8:	9c 91       	ld	r25, X
     ada:	92 17       	cp	r25, r18
     adc:	08 f0       	brcs	.+2      	; 0xae0 <xTaskIncrementTick+0x1e0>
     ade:	4b cf       	rjmp	.-362    	; 0x976 <xTaskIncrementTick+0x76>
     ae0:	86 2f       	mov	r24, r22
     ae2:	49 cf       	rjmp	.-366    	; 0x976 <xTaskIncrementTick+0x76>
     ae4:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <pxCurrentTCB>
     ae8:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     aec:	26 89       	ldd	r18, Z+22	; 0x16
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	f9 01       	movw	r30, r18
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	2e 0f       	add	r18, r30
     b00:	3f 1f       	adc	r19, r31
     b02:	f9 01       	movw	r30, r18
     b04:	e8 57       	subi	r30, 0x78	; 120
     b06:	ff 4f       	sbci	r31, 0xFF	; 255
     b08:	90 81       	ld	r25, Z
     b0a:	92 30       	cpi	r25, 0x02	; 2
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <xTaskIncrementTick+0x210>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <xYieldPending>
     b14:	99 23       	and	r25, r25
     b16:	61 f0       	breq	.+24     	; 0xb30 <xTaskIncrementTick+0x230>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0a c0       	rjmp	.+20     	; 0xb30 <xTaskIncrementTick+0x230>
     b1c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <xPendedTicks>
     b20:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <xPendedTicks+0x1>
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <xPendedTicks+0x1>
     b2a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <xPendedTicks>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     b3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     b42:	88 23       	and	r24, r24
     b44:	21 f0       	breq	.+8      	; 0xb4e <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <xYieldPending>
     b4c:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     b4e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     b52:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <uxTopReadyPriority>
     b56:	82 2f       	mov	r24, r18
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
     b6c:	e8 57       	subi	r30, 0x78	; 120
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	30 81       	ld	r19, Z
     b72:	31 11       	cpse	r19, r1
     b74:	11 c0       	rjmp	.+34     	; 0xb98 <vTaskSwitchContext+0x5a>
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	82 2f       	mov	r24, r18
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	e8 57       	subi	r30, 0x78	; 120
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	30 81       	ld	r19, Z
     b94:	33 23       	and	r19, r19
     b96:	79 f3       	breq	.-34     	; 0xb76 <vTaskSwitchContext+0x38>
     b98:	ac 01       	movw	r20, r24
     b9a:	44 0f       	add	r20, r20
     b9c:	55 1f       	adc	r21, r21
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	48 0f       	add	r20, r24
     ba8:	59 1f       	adc	r21, r25
     baa:	da 01       	movw	r26, r20
     bac:	a8 57       	subi	r26, 0x78	; 120
     bae:	bf 4f       	sbci	r27, 0xFF	; 255
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	12 97       	sbiw	r26, 0x02	; 2
     bb8:	02 80       	ldd	r0, Z+2	; 0x02
     bba:	f3 81       	ldd	r31, Z+3	; 0x03
     bbc:	e0 2d       	mov	r30, r0
     bbe:	12 96       	adiw	r26, 0x02	; 2
     bc0:	fc 93       	st	X, r31
     bc2:	ee 93       	st	-X, r30
     bc4:	11 97       	sbiw	r26, 0x01	; 1
     bc6:	45 57       	subi	r20, 0x75	; 117
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	e4 17       	cp	r30, r20
     bcc:	f5 07       	cpc	r31, r21
     bce:	29 f4       	brne	.+10     	; 0xbda <vTaskSwitchContext+0x9c>
     bd0:	42 81       	ldd	r20, Z+2	; 0x02
     bd2:	53 81       	ldd	r21, Z+3	; 0x03
     bd4:	fd 01       	movw	r30, r26
     bd6:	52 83       	std	Z+2, r21	; 0x02
     bd8:	41 83       	std	Z+1, r20	; 0x01
     bda:	fc 01       	movw	r30, r24
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	8e 0f       	add	r24, r30
     bea:	9f 1f       	adc	r25, r31
     bec:	fc 01       	movw	r30, r24
     bee:	e8 57       	subi	r30, 0x78	; 120
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	01 80       	ldd	r0, Z+1	; 0x01
     bf4:	f2 81       	ldd	r31, Z+2	; 0x02
     bf6:	e0 2d       	mov	r30, r0
     bf8:	86 81       	ldd	r24, Z+6	; 0x06
     bfa:	97 81       	ldd	r25, Z+7	; 0x07
     bfc:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <pxCurrentTCB+0x1>
     c00:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <pxCurrentTCB>
     c04:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <uxTopReadyPriority>
     c08:	08 95       	ret

00000c0a <__subsf3>:
     c0a:	50 58       	subi	r21, 0x80	; 128

00000c0c <__addsf3>:
     c0c:	bb 27       	eor	r27, r27
     c0e:	aa 27       	eor	r26, r26
     c10:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__addsf3x>
     c14:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_round>
     c18:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_pscA>
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <__addsf3+0x20>
     c1e:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_pscB>
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3+0x20>
     c24:	39 f4       	brne	.+14     	; 0xc34 <__addsf3+0x28>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	19 f4       	brne	.+6      	; 0xc30 <__addsf3+0x24>
     c2a:	26 f4       	brtc	.+8      	; 0xc34 <__addsf3+0x28>
     c2c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>
     c30:	0e f4       	brtc	.+2      	; 0xc34 <__addsf3+0x28>
     c32:	e0 95       	com	r30
     c34:	e7 fb       	bst	r30, 7
     c36:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>

00000c3a <__addsf3x>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_split3>
     c40:	58 f3       	brcs	.-42     	; 0xc18 <__addsf3+0xc>
     c42:	ba 17       	cp	r27, r26
     c44:	62 07       	cpc	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	95 07       	cpc	r25, r21
     c4c:	20 f0       	brcs	.+8      	; 0xc56 <__addsf3x+0x1c>
     c4e:	79 f4       	brne	.+30     	; 0xc6e <__addsf3x+0x34>
     c50:	a6 f5       	brtc	.+104    	; 0xcba <__addsf3x+0x80>
     c52:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_zero>
     c56:	0e f4       	brtc	.+2      	; 0xc5a <__addsf3x+0x20>
     c58:	e0 95       	com	r30
     c5a:	0b 2e       	mov	r0, r27
     c5c:	ba 2f       	mov	r27, r26
     c5e:	a0 2d       	mov	r26, r0
     c60:	0b 01       	movw	r0, r22
     c62:	b9 01       	movw	r22, r18
     c64:	90 01       	movw	r18, r0
     c66:	0c 01       	movw	r0, r24
     c68:	ca 01       	movw	r24, r20
     c6a:	a0 01       	movw	r20, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	ff 27       	eor	r31, r31
     c70:	59 1b       	sub	r21, r25
     c72:	99 f0       	breq	.+38     	; 0xc9a <__addsf3x+0x60>
     c74:	59 3f       	cpi	r21, 0xF9	; 249
     c76:	50 f4       	brcc	.+20     	; 0xc8c <__addsf3x+0x52>
     c78:	50 3e       	cpi	r21, 0xE0	; 224
     c7a:	68 f1       	brcs	.+90     	; 0xcd6 <__addsf3x+0x9c>
     c7c:	1a 16       	cp	r1, r26
     c7e:	f0 40       	sbci	r31, 0x00	; 0
     c80:	a2 2f       	mov	r26, r18
     c82:	23 2f       	mov	r18, r19
     c84:	34 2f       	mov	r19, r20
     c86:	44 27       	eor	r20, r20
     c88:	58 5f       	subi	r21, 0xF8	; 248
     c8a:	f3 cf       	rjmp	.-26     	; 0xc72 <__addsf3x+0x38>
     c8c:	46 95       	lsr	r20
     c8e:	37 95       	ror	r19
     c90:	27 95       	ror	r18
     c92:	a7 95       	ror	r26
     c94:	f0 40       	sbci	r31, 0x00	; 0
     c96:	53 95       	inc	r21
     c98:	c9 f7       	brne	.-14     	; 0xc8c <__addsf3x+0x52>
     c9a:	7e f4       	brtc	.+30     	; 0xcba <__addsf3x+0x80>
     c9c:	1f 16       	cp	r1, r31
     c9e:	ba 0b       	sbc	r27, r26
     ca0:	62 0b       	sbc	r22, r18
     ca2:	73 0b       	sbc	r23, r19
     ca4:	84 0b       	sbc	r24, r20
     ca6:	ba f0       	brmi	.+46     	; 0xcd6 <__addsf3x+0x9c>
     ca8:	91 50       	subi	r25, 0x01	; 1
     caa:	a1 f0       	breq	.+40     	; 0xcd4 <__addsf3x+0x9a>
     cac:	ff 0f       	add	r31, r31
     cae:	bb 1f       	adc	r27, r27
     cb0:	66 1f       	adc	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	c2 f7       	brpl	.-16     	; 0xca8 <__addsf3x+0x6e>
     cb8:	0e c0       	rjmp	.+28     	; 0xcd6 <__addsf3x+0x9c>
     cba:	ba 0f       	add	r27, r26
     cbc:	62 1f       	adc	r22, r18
     cbe:	73 1f       	adc	r23, r19
     cc0:	84 1f       	adc	r24, r20
     cc2:	48 f4       	brcc	.+18     	; 0xcd6 <__addsf3x+0x9c>
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f7 95       	ror	r31
     cce:	9e 3f       	cpi	r25, 0xFE	; 254
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0x9a>
     cd2:	b0 cf       	rjmp	.-160    	; 0xc34 <__addsf3+0x28>
     cd4:	93 95       	inc	r25
     cd6:	88 0f       	add	r24, r24
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <__addsf3x+0xa2>
     cda:	99 27       	eor	r25, r25
     cdc:	ee 0f       	add	r30, r30
     cde:	97 95       	ror	r25
     ce0:	87 95       	ror	r24
     ce2:	08 95       	ret

00000ce4 <__fixsfsi>:
     ce4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
     ce8:	68 94       	set
     cea:	b1 11       	cpse	r27, r1
     cec:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
     cf0:	08 95       	ret

00000cf2 <__fixunssfsi>:
     cf2:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_splitA>
     cf6:	88 f0       	brcs	.+34     	; 0xd1a <__fixunssfsi+0x28>
     cf8:	9f 57       	subi	r25, 0x7F	; 127
     cfa:	98 f0       	brcs	.+38     	; 0xd22 <__fixunssfsi+0x30>
     cfc:	b9 2f       	mov	r27, r25
     cfe:	99 27       	eor	r25, r25
     d00:	b7 51       	subi	r27, 0x17	; 23
     d02:	b0 f0       	brcs	.+44     	; 0xd30 <__fixunssfsi+0x3e>
     d04:	e1 f0       	breq	.+56     	; 0xd3e <__fixunssfsi+0x4c>
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	1a f0       	brmi	.+6      	; 0xd16 <__fixunssfsi+0x24>
     d10:	ba 95       	dec	r27
     d12:	c9 f7       	brne	.-14     	; 0xd06 <__fixunssfsi+0x14>
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <__fixunssfsi+0x4c>
     d16:	b1 30       	cpi	r27, 0x01	; 1
     d18:	91 f0       	breq	.+36     	; 0xd3e <__fixunssfsi+0x4c>
     d1a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_zero>
     d1e:	b1 e0       	ldi	r27, 0x01	; 1
     d20:	08 95       	ret
     d22:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_zero>
     d26:	67 2f       	mov	r22, r23
     d28:	78 2f       	mov	r23, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	b8 5f       	subi	r27, 0xF8	; 248
     d2e:	39 f0       	breq	.+14     	; 0xd3e <__fixunssfsi+0x4c>
     d30:	b9 3f       	cpi	r27, 0xF9	; 249
     d32:	cc f3       	brlt	.-14     	; 0xd26 <__fixunssfsi+0x34>
     d34:	86 95       	lsr	r24
     d36:	77 95       	ror	r23
     d38:	67 95       	ror	r22
     d3a:	b3 95       	inc	r27
     d3c:	d9 f7       	brne	.-10     	; 0xd34 <__fixunssfsi+0x42>
     d3e:	3e f4       	brtc	.+14     	; 0xd4e <__fixunssfsi+0x5c>
     d40:	90 95       	com	r25
     d42:	80 95       	com	r24
     d44:	70 95       	com	r23
     d46:	61 95       	neg	r22
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	8f 4f       	sbci	r24, 0xFF	; 255
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	08 95       	ret

00000d50 <__floatunsisf>:
     d50:	e8 94       	clt
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <__floatsisf+0x12>

00000d54 <__floatsisf>:
     d54:	97 fb       	bst	r25, 7
     d56:	3e f4       	brtc	.+14     	; 0xd66 <__floatsisf+0x12>
     d58:	90 95       	com	r25
     d5a:	80 95       	com	r24
     d5c:	70 95       	com	r23
     d5e:	61 95       	neg	r22
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	99 23       	and	r25, r25
     d68:	a9 f0       	breq	.+42     	; 0xd94 <__floatsisf+0x40>
     d6a:	f9 2f       	mov	r31, r25
     d6c:	96 e9       	ldi	r25, 0x96	; 150
     d6e:	bb 27       	eor	r27, r27
     d70:	93 95       	inc	r25
     d72:	f6 95       	lsr	r31
     d74:	87 95       	ror	r24
     d76:	77 95       	ror	r23
     d78:	67 95       	ror	r22
     d7a:	b7 95       	ror	r27
     d7c:	f1 11       	cpse	r31, r1
     d7e:	f8 cf       	rjmp	.-16     	; 0xd70 <__floatsisf+0x1c>
     d80:	fa f4       	brpl	.+62     	; 0xdc0 <__floatsisf+0x6c>
     d82:	bb 0f       	add	r27, r27
     d84:	11 f4       	brne	.+4      	; 0xd8a <__floatsisf+0x36>
     d86:	60 ff       	sbrs	r22, 0
     d88:	1b c0       	rjmp	.+54     	; 0xdc0 <__floatsisf+0x6c>
     d8a:	6f 5f       	subi	r22, 0xFF	; 255
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	16 c0       	rjmp	.+44     	; 0xdc0 <__floatsisf+0x6c>
     d94:	88 23       	and	r24, r24
     d96:	11 f0       	breq	.+4      	; 0xd9c <__floatsisf+0x48>
     d98:	96 e9       	ldi	r25, 0x96	; 150
     d9a:	11 c0       	rjmp	.+34     	; 0xdbe <__floatsisf+0x6a>
     d9c:	77 23       	and	r23, r23
     d9e:	21 f0       	breq	.+8      	; 0xda8 <__floatsisf+0x54>
     da0:	9e e8       	ldi	r25, 0x8E	; 142
     da2:	87 2f       	mov	r24, r23
     da4:	76 2f       	mov	r23, r22
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <__floatsisf+0x5e>
     da8:	66 23       	and	r22, r22
     daa:	71 f0       	breq	.+28     	; 0xdc8 <__floatsisf+0x74>
     dac:	96 e8       	ldi	r25, 0x86	; 134
     dae:	86 2f       	mov	r24, r22
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	2a f0       	brmi	.+10     	; 0xdc0 <__floatsisf+0x6c>
     db6:	9a 95       	dec	r25
     db8:	66 0f       	add	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	da f7       	brpl	.-10     	; 0xdb6 <__floatsisf+0x62>
     dc0:	88 0f       	add	r24, r24
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	97 f9       	bld	r25, 7
     dc8:	08 95       	ret

00000dca <__fp_inf>:
     dca:	97 f9       	bld	r25, 7
     dcc:	9f 67       	ori	r25, 0x7F	; 127
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	08 95       	ret

00000dd6 <__fp_nan>:
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	80 ec       	ldi	r24, 0xC0	; 192
     dda:	08 95       	ret

00000ddc <__fp_pscA>:
     ddc:	00 24       	eor	r0, r0
     dde:	0a 94       	dec	r0
     de0:	16 16       	cp	r1, r22
     de2:	17 06       	cpc	r1, r23
     de4:	18 06       	cpc	r1, r24
     de6:	09 06       	cpc	r0, r25
     de8:	08 95       	ret

00000dea <__fp_pscB>:
     dea:	00 24       	eor	r0, r0
     dec:	0a 94       	dec	r0
     dee:	12 16       	cp	r1, r18
     df0:	13 06       	cpc	r1, r19
     df2:	14 06       	cpc	r1, r20
     df4:	05 06       	cpc	r0, r21
     df6:	08 95       	ret

00000df8 <__fp_round>:
     df8:	09 2e       	mov	r0, r25
     dfa:	03 94       	inc	r0
     dfc:	00 0c       	add	r0, r0
     dfe:	11 f4       	brne	.+4      	; 0xe04 <__fp_round+0xc>
     e00:	88 23       	and	r24, r24
     e02:	52 f0       	brmi	.+20     	; 0xe18 <__fp_round+0x20>
     e04:	bb 0f       	add	r27, r27
     e06:	40 f4       	brcc	.+16     	; 0xe18 <__fp_round+0x20>
     e08:	bf 2b       	or	r27, r31
     e0a:	11 f4       	brne	.+4      	; 0xe10 <__fp_round+0x18>
     e0c:	60 ff       	sbrs	r22, 0
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <__fp_round+0x20>
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	8f 4f       	sbci	r24, 0xFF	; 255
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	08 95       	ret

00000e1a <__fp_split3>:
     e1a:	57 fd       	sbrc	r21, 7
     e1c:	90 58       	subi	r25, 0x80	; 128
     e1e:	44 0f       	add	r20, r20
     e20:	55 1f       	adc	r21, r21
     e22:	59 f0       	breq	.+22     	; 0xe3a <__fp_splitA+0x10>
     e24:	5f 3f       	cpi	r21, 0xFF	; 255
     e26:	71 f0       	breq	.+28     	; 0xe44 <__fp_splitA+0x1a>
     e28:	47 95       	ror	r20

00000e2a <__fp_splitA>:
     e2a:	88 0f       	add	r24, r24
     e2c:	97 fb       	bst	r25, 7
     e2e:	99 1f       	adc	r25, r25
     e30:	61 f0       	breq	.+24     	; 0xe4a <__fp_splitA+0x20>
     e32:	9f 3f       	cpi	r25, 0xFF	; 255
     e34:	79 f0       	breq	.+30     	; 0xe54 <__fp_splitA+0x2a>
     e36:	87 95       	ror	r24
     e38:	08 95       	ret
     e3a:	12 16       	cp	r1, r18
     e3c:	13 06       	cpc	r1, r19
     e3e:	14 06       	cpc	r1, r20
     e40:	55 1f       	adc	r21, r21
     e42:	f2 cf       	rjmp	.-28     	; 0xe28 <__fp_split3+0xe>
     e44:	46 95       	lsr	r20
     e46:	f1 df       	rcall	.-30     	; 0xe2a <__fp_splitA>
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <__fp_splitA+0x30>
     e4a:	16 16       	cp	r1, r22
     e4c:	17 06       	cpc	r1, r23
     e4e:	18 06       	cpc	r1, r24
     e50:	99 1f       	adc	r25, r25
     e52:	f1 cf       	rjmp	.-30     	; 0xe36 <__fp_splitA+0xc>
     e54:	86 95       	lsr	r24
     e56:	71 05       	cpc	r23, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	08 94       	sec
     e5c:	08 95       	ret

00000e5e <__fp_zero>:
     e5e:	e8 94       	clt

00000e60 <__fp_szero>:
     e60:	bb 27       	eor	r27, r27
     e62:	66 27       	eor	r22, r22
     e64:	77 27       	eor	r23, r23
     e66:	cb 01       	movw	r24, r22
     e68:	97 f9       	bld	r25, 7
     e6a:	08 95       	ret

00000e6c <__gesf2>:
     e6c:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_cmp>
     e70:	08 f4       	brcc	.+2      	; 0xe74 <__gesf2+0x8>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	08 95       	ret

00000e76 <__mulsf3>:
     e76:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__mulsf3x>
     e7a:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_round>
     e7e:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_pscA>
     e82:	38 f0       	brcs	.+14     	; 0xe92 <__mulsf3+0x1c>
     e84:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_pscB>
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__mulsf3+0x1c>
     e8a:	95 23       	and	r25, r21
     e8c:	11 f0       	breq	.+4      	; 0xe92 <__mulsf3+0x1c>
     e8e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
     e92:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>
     e96:	11 24       	eor	r1, r1
     e98:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>

00000e9c <__mulsf3x>:
     e9c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_split3>
     ea0:	70 f3       	brcs	.-36     	; 0xe7e <__mulsf3+0x8>

00000ea2 <__mulsf3_pse>:
     ea2:	95 9f       	mul	r25, r21
     ea4:	c1 f3       	breq	.-16     	; 0xe96 <__mulsf3+0x20>
     ea6:	95 0f       	add	r25, r21
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	55 1f       	adc	r21, r21
     eac:	62 9f       	mul	r22, r18
     eae:	f0 01       	movw	r30, r0
     eb0:	72 9f       	mul	r23, r18
     eb2:	bb 27       	eor	r27, r27
     eb4:	f0 0d       	add	r31, r0
     eb6:	b1 1d       	adc	r27, r1
     eb8:	63 9f       	mul	r22, r19
     eba:	aa 27       	eor	r26, r26
     ebc:	f0 0d       	add	r31, r0
     ebe:	b1 1d       	adc	r27, r1
     ec0:	aa 1f       	adc	r26, r26
     ec2:	64 9f       	mul	r22, r20
     ec4:	66 27       	eor	r22, r22
     ec6:	b0 0d       	add	r27, r0
     ec8:	a1 1d       	adc	r26, r1
     eca:	66 1f       	adc	r22, r22
     ecc:	82 9f       	mul	r24, r18
     ece:	22 27       	eor	r18, r18
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 9f       	mul	r23, r19
     ed8:	b0 0d       	add	r27, r0
     eda:	a1 1d       	adc	r26, r1
     edc:	62 1f       	adc	r22, r18
     ede:	83 9f       	mul	r24, r19
     ee0:	a0 0d       	add	r26, r0
     ee2:	61 1d       	adc	r22, r1
     ee4:	22 1f       	adc	r18, r18
     ee6:	74 9f       	mul	r23, r20
     ee8:	33 27       	eor	r19, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	23 1f       	adc	r18, r19
     ef0:	84 9f       	mul	r24, r20
     ef2:	60 0d       	add	r22, r0
     ef4:	21 1d       	adc	r18, r1
     ef6:	82 2f       	mov	r24, r18
     ef8:	76 2f       	mov	r23, r22
     efa:	6a 2f       	mov	r22, r26
     efc:	11 24       	eor	r1, r1
     efe:	9f 57       	subi	r25, 0x7F	; 127
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	9a f0       	brmi	.+38     	; 0xf2a <__mulsf3_pse+0x88>
     f04:	f1 f0       	breq	.+60     	; 0xf42 <__mulsf3_pse+0xa0>
     f06:	88 23       	and	r24, r24
     f08:	4a f0       	brmi	.+18     	; 0xf1c <__mulsf3_pse+0x7a>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <__mulsf3_pse+0x64>
     f1c:	9e 3f       	cpi	r25, 0xFE	; 254
     f1e:	51 05       	cpc	r21, r1
     f20:	80 f0       	brcs	.+32     	; 0xf42 <__mulsf3_pse+0xa0>
     f22:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
     f26:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	e4 f3       	brlt	.-8      	; 0xf26 <__mulsf3_pse+0x84>
     f2e:	98 3e       	cpi	r25, 0xE8	; 232
     f30:	d4 f3       	brlt	.-12     	; 0xf26 <__mulsf3_pse+0x84>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	e7 95       	ror	r30
     f3e:	9f 5f       	subi	r25, 0xFF	; 255
     f40:	c1 f7       	brne	.-16     	; 0xf32 <__mulsf3_pse+0x90>
     f42:	fe 2b       	or	r31, r30
     f44:	88 0f       	add	r24, r24
     f46:	91 1d       	adc	r25, r1
     f48:	96 95       	lsr	r25
     f4a:	87 95       	ror	r24
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <pow>:
     f50:	fa 01       	movw	r30, r20
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	30 96       	adiw	r30, 0x00	; 0
     f58:	21 05       	cpc	r18, r1
     f5a:	31 05       	cpc	r19, r1
     f5c:	a1 f1       	breq	.+104    	; 0xfc6 <pow+0x76>
     f5e:	61 15       	cp	r22, r1
     f60:	71 05       	cpc	r23, r1
     f62:	61 f4       	brne	.+24     	; 0xf7c <pow+0x2c>
     f64:	80 38       	cpi	r24, 0x80	; 128
     f66:	bf e3       	ldi	r27, 0x3F	; 63
     f68:	9b 07       	cpc	r25, r27
     f6a:	49 f1       	breq	.+82     	; 0xfbe <pow+0x6e>
     f6c:	68 94       	set
     f6e:	90 38       	cpi	r25, 0x80	; 128
     f70:	81 05       	cpc	r24, r1
     f72:	61 f0       	breq	.+24     	; 0xf8c <pow+0x3c>
     f74:	80 38       	cpi	r24, 0x80	; 128
     f76:	bf ef       	ldi	r27, 0xFF	; 255
     f78:	9b 07       	cpc	r25, r27
     f7a:	41 f0       	breq	.+16     	; 0xf8c <pow+0x3c>
     f7c:	99 23       	and	r25, r25
     f7e:	4a f5       	brpl	.+82     	; 0xfd2 <pow+0x82>
     f80:	ff 3f       	cpi	r31, 0xFF	; 255
     f82:	e1 05       	cpc	r30, r1
     f84:	31 05       	cpc	r19, r1
     f86:	21 05       	cpc	r18, r1
     f88:	19 f1       	breq	.+70     	; 0xfd0 <pow+0x80>
     f8a:	e8 94       	clt
     f8c:	08 94       	sec
     f8e:	e7 95       	ror	r30
     f90:	d9 01       	movw	r26, r18
     f92:	aa 23       	and	r26, r26
     f94:	29 f4       	brne	.+10     	; 0xfa0 <pow+0x50>
     f96:	ab 2f       	mov	r26, r27
     f98:	be 2f       	mov	r27, r30
     f9a:	f8 5f       	subi	r31, 0xF8	; 248
     f9c:	d0 f3       	brcs	.-12     	; 0xf92 <pow+0x42>
     f9e:	10 c0       	rjmp	.+32     	; 0xfc0 <pow+0x70>
     fa0:	ff 5f       	subi	r31, 0xFF	; 255
     fa2:	70 f4       	brcc	.+28     	; 0xfc0 <pow+0x70>
     fa4:	a6 95       	lsr	r26
     fa6:	e0 f7       	brcc	.-8      	; 0xfa0 <pow+0x50>
     fa8:	f7 39       	cpi	r31, 0x97	; 151
     faa:	50 f0       	brcs	.+20     	; 0xfc0 <pow+0x70>
     fac:	19 f0       	breq	.+6      	; 0xfb4 <pow+0x64>
     fae:	ff 3a       	cpi	r31, 0xAF	; 175
     fb0:	38 f4       	brcc	.+14     	; 0xfc0 <pow+0x70>
     fb2:	9f 77       	andi	r25, 0x7F	; 127
     fb4:	9f 93       	push	r25
     fb6:	0d d0       	rcall	.+26     	; 0xfd2 <pow+0x82>
     fb8:	0f 90       	pop	r0
     fba:	07 fc       	sbrc	r0, 7
     fbc:	90 58       	subi	r25, 0x80	; 128
     fbe:	08 95       	ret
     fc0:	46 f0       	brts	.+16     	; 0xfd2 <pow+0x82>
     fc2:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e8       	ldi	r24, 0x80	; 128
     fcc:	9f e3       	ldi	r25, 0x3F	; 63
     fce:	08 95       	ret
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	9f 77       	andi	r25, 0x7F	; 127
     fd4:	5f 93       	push	r21
     fd6:	4f 93       	push	r20
     fd8:	3f 93       	push	r19
     fda:	2f 93       	push	r18
     fdc:	0e 94 14 09 	call	0x1228	; 0x1228 <log>
     fe0:	2f 91       	pop	r18
     fe2:	3f 91       	pop	r19
     fe4:	4f 91       	pop	r20
     fe6:	5f 91       	pop	r21
     fe8:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     fec:	0c 94 24 08 	jmp	0x1048	; 0x1048 <exp>

00000ff0 <round>:
     ff0:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_splitA>
     ff4:	e8 f0       	brcs	.+58     	; 0x1030 <round+0x40>
     ff6:	9e 37       	cpi	r25, 0x7E	; 126
     ff8:	e8 f0       	brcs	.+58     	; 0x1034 <round+0x44>
     ffa:	96 39       	cpi	r25, 0x96	; 150
     ffc:	b8 f4       	brcc	.+46     	; 0x102c <round+0x3c>
     ffe:	9e 38       	cpi	r25, 0x8E	; 142
    1000:	48 f4       	brcc	.+18     	; 0x1014 <round+0x24>
    1002:	67 2f       	mov	r22, r23
    1004:	78 2f       	mov	r23, r24
    1006:	88 27       	eor	r24, r24
    1008:	98 5f       	subi	r25, 0xF8	; 248
    100a:	f9 cf       	rjmp	.-14     	; 0xffe <round+0xe>
    100c:	86 95       	lsr	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	93 95       	inc	r25
    1014:	95 39       	cpi	r25, 0x95	; 149
    1016:	d0 f3       	brcs	.-12     	; 0x100c <round+0x1c>
    1018:	b6 2f       	mov	r27, r22
    101a:	b1 70       	andi	r27, 0x01	; 1
    101c:	6b 0f       	add	r22, r27
    101e:	71 1d       	adc	r23, r1
    1020:	81 1d       	adc	r24, r1
    1022:	20 f4       	brcc	.+8      	; 0x102c <round+0x3c>
    1024:	87 95       	ror	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	93 95       	inc	r25
    102c:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_mintl>
    1030:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_mpack>
    1034:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
    1038:	29 f4       	brne	.+10     	; 0x1044 <round+0x54>
    103a:	16 f0       	brts	.+4      	; 0x1040 <round+0x50>
    103c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
    1040:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_zero>
    1044:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>

00001048 <exp>:
    1048:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_splitA>
    104c:	a8 f3       	brcs	.-22     	; 0x1038 <round+0x48>
    104e:	96 38       	cpi	r25, 0x86	; 134
    1050:	a0 f7       	brcc	.-24     	; 0x103a <round+0x4a>
    1052:	07 f8       	bld	r0, 7
    1054:	0f 92       	push	r0
    1056:	e8 94       	clt
    1058:	2b e3       	ldi	r18, 0x3B	; 59
    105a:	3a ea       	ldi	r19, 0xAA	; 170
    105c:	48 eb       	ldi	r20, 0xB8	; 184
    105e:	5f e7       	ldi	r21, 0x7F	; 127
    1060:	0e 94 51 07 	call	0xea2	; 0xea2 <__mulsf3_pse>
    1064:	0f 92       	push	r0
    1066:	0f 92       	push	r0
    1068:	0f 92       	push	r0
    106a:	4d b7       	in	r20, 0x3d	; 61
    106c:	5e b7       	in	r21, 0x3e	; 62
    106e:	0f 92       	push	r0
    1070:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <modf>
    1074:	e4 e6       	ldi	r30, 0x64	; 100
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_powser>
    107c:	4f 91       	pop	r20
    107e:	5f 91       	pop	r21
    1080:	ef 91       	pop	r30
    1082:	ff 91       	pop	r31
    1084:	e5 95       	asr	r30
    1086:	ee 1f       	adc	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	49 f0       	breq	.+18     	; 0x109e <exp+0x56>
    108c:	fe 57       	subi	r31, 0x7E	; 126
    108e:	e0 68       	ori	r30, 0x80	; 128
    1090:	44 27       	eor	r20, r20
    1092:	ee 0f       	add	r30, r30
    1094:	44 1f       	adc	r20, r20
    1096:	fa 95       	dec	r31
    1098:	e1 f7       	brne	.-8      	; 0x1092 <exp+0x4a>
    109a:	41 95       	neg	r20
    109c:	55 0b       	sbc	r21, r21
    109e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ldexp>
    10a2:	0f 90       	pop	r0
    10a4:	07 fe       	sbrs	r0, 7
    10a6:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <inverse>
    10aa:	08 95       	ret

000010ac <__fp_cmp>:
    10ac:	99 0f       	add	r25, r25
    10ae:	00 08       	sbc	r0, r0
    10b0:	55 0f       	add	r21, r21
    10b2:	aa 0b       	sbc	r26, r26
    10b4:	e0 e8       	ldi	r30, 0x80	; 128
    10b6:	fe ef       	ldi	r31, 0xFE	; 254
    10b8:	16 16       	cp	r1, r22
    10ba:	17 06       	cpc	r1, r23
    10bc:	e8 07       	cpc	r30, r24
    10be:	f9 07       	cpc	r31, r25
    10c0:	c0 f0       	brcs	.+48     	; 0x10f2 <__fp_cmp+0x46>
    10c2:	12 16       	cp	r1, r18
    10c4:	13 06       	cpc	r1, r19
    10c6:	e4 07       	cpc	r30, r20
    10c8:	f5 07       	cpc	r31, r21
    10ca:	98 f0       	brcs	.+38     	; 0x10f2 <__fp_cmp+0x46>
    10cc:	62 1b       	sub	r22, r18
    10ce:	73 0b       	sbc	r23, r19
    10d0:	84 0b       	sbc	r24, r20
    10d2:	95 0b       	sbc	r25, r21
    10d4:	39 f4       	brne	.+14     	; 0x10e4 <__fp_cmp+0x38>
    10d6:	0a 26       	eor	r0, r26
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <__fp_cmp+0x46>
    10da:	23 2b       	or	r18, r19
    10dc:	24 2b       	or	r18, r20
    10de:	25 2b       	or	r18, r21
    10e0:	21 f4       	brne	.+8      	; 0x10ea <__fp_cmp+0x3e>
    10e2:	08 95       	ret
    10e4:	0a 26       	eor	r0, r26
    10e6:	09 f4       	brne	.+2      	; 0x10ea <__fp_cmp+0x3e>
    10e8:	a1 40       	sbci	r26, 0x01	; 1
    10ea:	a6 95       	lsr	r26
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	81 1d       	adc	r24, r1
    10f0:	81 1d       	adc	r24, r1
    10f2:	08 95       	ret

000010f4 <__fp_mintl>:
    10f4:	88 23       	and	r24, r24
    10f6:	71 f4       	brne	.+28     	; 0x1114 <__fp_mintl+0x20>
    10f8:	77 23       	and	r23, r23
    10fa:	21 f0       	breq	.+8      	; 0x1104 <__fp_mintl+0x10>
    10fc:	98 50       	subi	r25, 0x08	; 8
    10fe:	87 2b       	or	r24, r23
    1100:	76 2f       	mov	r23, r22
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <__fp_mintl+0x1e>
    1104:	66 23       	and	r22, r22
    1106:	11 f4       	brne	.+4      	; 0x110c <__fp_mintl+0x18>
    1108:	99 27       	eor	r25, r25
    110a:	0d c0       	rjmp	.+26     	; 0x1126 <__fp_mintl+0x32>
    110c:	90 51       	subi	r25, 0x10	; 16
    110e:	86 2b       	or	r24, r22
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	2a f0       	brmi	.+10     	; 0x1120 <__fp_mintl+0x2c>
    1116:	9a 95       	dec	r25
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	da f7       	brpl	.-10     	; 0x1116 <__fp_mintl+0x22>
    1120:	88 0f       	add	r24, r24
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__fp_mpack>:
    112a:	9f 3f       	cpi	r25, 0xFF	; 255
    112c:	31 f0       	breq	.+12     	; 0x113a <__fp_mpack_finite+0xc>

0000112e <__fp_mpack_finite>:
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	20 f4       	brcc	.+8      	; 0x113a <__fp_mpack_finite+0xc>
    1132:	87 95       	ror	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__fp_powser>:
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	1f 93       	push	r17
    114c:	0f 93       	push	r16
    114e:	ff 92       	push	r15
    1150:	ef 92       	push	r14
    1152:	df 92       	push	r13
    1154:	7b 01       	movw	r14, r22
    1156:	8c 01       	movw	r16, r24
    1158:	68 94       	set
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <__fp_powser+0x22>
    115c:	da 2e       	mov	r13, r26
    115e:	ef 01       	movw	r28, r30
    1160:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__mulsf3x>
    1164:	fe 01       	movw	r30, r28
    1166:	e8 94       	clt
    1168:	a5 91       	lpm	r26, Z+
    116a:	25 91       	lpm	r18, Z+
    116c:	35 91       	lpm	r19, Z+
    116e:	45 91       	lpm	r20, Z+
    1170:	55 91       	lpm	r21, Z+
    1172:	a6 f3       	brts	.-24     	; 0x115c <__fp_powser+0x16>
    1174:	ef 01       	movw	r28, r30
    1176:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__addsf3x>
    117a:	fe 01       	movw	r30, r28
    117c:	97 01       	movw	r18, r14
    117e:	a8 01       	movw	r20, r16
    1180:	da 94       	dec	r13
    1182:	69 f7       	brne	.-38     	; 0x115e <__fp_powser+0x18>
    1184:	df 90       	pop	r13
    1186:	ef 90       	pop	r14
    1188:	ff 90       	pop	r15
    118a:	0f 91       	pop	r16
    118c:	1f 91       	pop	r17
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <inverse>:
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e8       	ldi	r24, 0x80	; 128
    119e:	9f e3       	ldi	r25, 0x3F	; 63
    11a0:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__divsf3>
    11a4:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
    11a8:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_mpack>

000011ac <ldexp>:
    11ac:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_splitA>
    11b0:	d8 f3       	brcs	.-10     	; 0x11a8 <inverse+0x14>
    11b2:	99 23       	and	r25, r25
    11b4:	c9 f3       	breq	.-14     	; 0x11a8 <inverse+0x14>
    11b6:	94 0f       	add	r25, r20
    11b8:	51 1d       	adc	r21, r1
    11ba:	a3 f3       	brvs	.-24     	; 0x11a4 <inverse+0x10>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	50 40       	sbci	r21, 0x00	; 0
    11c0:	94 f0       	brlt	.+36     	; 0x11e6 <ldexp+0x3a>
    11c2:	59 f0       	breq	.+22     	; 0x11da <ldexp+0x2e>
    11c4:	88 23       	and	r24, r24
    11c6:	32 f0       	brmi	.+12     	; 0x11d4 <ldexp+0x28>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	91 50       	subi	r25, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	c1 f7       	brne	.-16     	; 0x11c4 <ldexp+0x18>
    11d4:	9e 3f       	cpi	r25, 0xFE	; 254
    11d6:	51 05       	cpc	r21, r1
    11d8:	2c f7       	brge	.-54     	; 0x11a4 <inverse+0x10>
    11da:	88 0f       	add	r24, r24
    11dc:	91 1d       	adc	r25, r1
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	ac f0       	brlt	.+42     	; 0x1214 <ldexp+0x68>
    11ea:	98 3e       	cpi	r25, 0xE8	; 232
    11ec:	9c f0       	brlt	.+38     	; 0x1214 <ldexp+0x68>
    11ee:	bb 27       	eor	r27, r27
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	08 f4       	brcc	.+2      	; 0x11fc <ldexp+0x50>
    11fa:	b1 60       	ori	r27, 0x01	; 1
    11fc:	93 95       	inc	r25
    11fe:	c1 f7       	brne	.-16     	; 0x11f0 <ldexp+0x44>
    1200:	bb 0f       	add	r27, r27
    1202:	58 f7       	brcc	.-42     	; 0x11da <ldexp+0x2e>
    1204:	11 f4       	brne	.+4      	; 0x120a <ldexp+0x5e>
    1206:	60 ff       	sbrs	r22, 0
    1208:	e8 cf       	rjmp	.-48     	; 0x11da <ldexp+0x2e>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	e3 cf       	rjmp	.-58     	; 0x11da <ldexp+0x2e>
    1214:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
    1218:	16 f0       	brts	.+4      	; 0x121e <ldexp+0x72>
    121a:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_mpack>
    121e:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>
    1222:	68 94       	set
    1224:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>

00001228 <log>:
    1228:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_splitA>
    122c:	a8 f3       	brcs	.-22     	; 0x1218 <ldexp+0x6c>
    122e:	99 23       	and	r25, r25
    1230:	c1 f3       	breq	.-16     	; 0x1222 <ldexp+0x76>
    1232:	ae f3       	brts	.-22     	; 0x121e <ldexp+0x72>
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	1f 93       	push	r17
    123a:	0f 93       	push	r16
    123c:	ff 92       	push	r15
    123e:	c9 2f       	mov	r28, r25
    1240:	dd 27       	eor	r29, r29
    1242:	88 23       	and	r24, r24
    1244:	2a f0       	brmi	.+10     	; 0x1250 <log+0x28>
    1246:	21 97       	sbiw	r28, 0x01	; 1
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	da f7       	brpl	.-10     	; 0x1246 <log+0x1e>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f eb       	ldi	r21, 0xBF	; 191
    1258:	9f e3       	ldi	r25, 0x3F	; 63
    125a:	88 39       	cpi	r24, 0x98	; 152
    125c:	20 f0       	brcs	.+8      	; 0x1266 <log+0x3e>
    125e:	80 3e       	cpi	r24, 0xE0	; 224
    1260:	38 f0       	brcs	.+14     	; 0x1270 <log+0x48>
    1262:	21 96       	adiw	r28, 0x01	; 1
    1264:	8f 77       	andi	r24, 0x7F	; 127
    1266:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
    126a:	ec e8       	ldi	r30, 0x8C	; 140
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <log+0x50>
    1270:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
    1274:	e9 eb       	ldi	r30, 0xB9	; 185
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_powser>
    127c:	8b 01       	movw	r16, r22
    127e:	be 01       	movw	r22, r28
    1280:	ec 01       	movw	r28, r24
    1282:	fb 2e       	mov	r15, r27
    1284:	6f 57       	subi	r22, 0x7F	; 127
    1286:	71 09       	sbc	r23, r1
    1288:	75 95       	asr	r23
    128a:	77 1f       	adc	r23, r23
    128c:	88 0b       	sbc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	0e 94 aa 06 	call	0xd54	; 0xd54 <__floatsisf>
    1294:	28 e1       	ldi	r18, 0x18	; 24
    1296:	32 e7       	ldi	r19, 0x72	; 114
    1298:	41 e3       	ldi	r20, 0x31	; 49
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__mulsf3x>
    12a0:	af 2d       	mov	r26, r15
    12a2:	98 01       	movw	r18, r16
    12a4:	ae 01       	movw	r20, r28
    12a6:	ff 90       	pop	r15
    12a8:	0f 91       	pop	r16
    12aa:	1f 91       	pop	r17
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__addsf3x>
    12b4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_round>

000012b8 <modf>:
    12b8:	fa 01       	movw	r30, r20
    12ba:	dc 01       	movw	r26, r24
    12bc:	aa 0f       	add	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	bf 57       	subi	r27, 0x7F	; 127
    12c6:	28 f4       	brcc	.+10     	; 0x12d2 <modf+0x1a>
    12c8:	22 27       	eor	r18, r18
    12ca:	33 27       	eor	r19, r19
    12cc:	44 27       	eor	r20, r20
    12ce:	50 78       	andi	r21, 0x80	; 128
    12d0:	20 c0       	rjmp	.+64     	; 0x1312 <modf+0x5a>
    12d2:	b7 51       	subi	r27, 0x17	; 23
    12d4:	90 f4       	brcc	.+36     	; 0x12fa <modf+0x42>
    12d6:	ab 2f       	mov	r26, r27
    12d8:	00 24       	eor	r0, r0
    12da:	46 95       	lsr	r20
    12dc:	37 95       	ror	r19
    12de:	27 95       	ror	r18
    12e0:	01 1c       	adc	r0, r1
    12e2:	a3 95       	inc	r26
    12e4:	d2 f3       	brmi	.-12     	; 0x12da <modf+0x22>
    12e6:	00 20       	and	r0, r0
    12e8:	71 f0       	breq	.+28     	; 0x1306 <modf+0x4e>
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	44 1f       	adc	r20, r20
    12f0:	b3 95       	inc	r27
    12f2:	da f3       	brmi	.-10     	; 0x12ea <modf+0x32>
    12f4:	0e d0       	rcall	.+28     	; 0x1312 <modf+0x5a>
    12f6:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__subsf3>
    12fa:	61 30       	cpi	r22, 0x01	; 1
    12fc:	71 05       	cpc	r23, r1
    12fe:	a0 e8       	ldi	r26, 0x80	; 128
    1300:	8a 07       	cpc	r24, r26
    1302:	b9 46       	sbci	r27, 0x69	; 105
    1304:	30 f4       	brcc	.+12     	; 0x1312 <modf+0x5a>
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	66 27       	eor	r22, r22
    130c:	77 27       	eor	r23, r23
    130e:	88 27       	eor	r24, r24
    1310:	90 78       	andi	r25, 0x80	; 128
    1312:	30 96       	adiw	r30, 0x00	; 0
    1314:	21 f0       	breq	.+8      	; 0x131e <modf+0x66>
    1316:	20 83       	st	Z, r18
    1318:	31 83       	std	Z+1, r19	; 0x01
    131a:	42 83       	std	Z+2, r20	; 0x02
    131c:	53 83       	std	Z+3, r21	; 0x03
    131e:	08 95       	ret

00001320 <__divsf3>:
    1320:	0e 94 a4 09 	call	0x1348	; 0x1348 <__divsf3x>
    1324:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_round>
    1328:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_pscB>
    132c:	58 f0       	brcs	.+22     	; 0x1344 <__divsf3+0x24>
    132e:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_pscA>
    1332:	40 f0       	brcs	.+16     	; 0x1344 <__divsf3+0x24>
    1334:	29 f4       	brne	.+10     	; 0x1340 <__divsf3+0x20>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	29 f0       	breq	.+10     	; 0x1344 <__divsf3+0x24>
    133a:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
    133e:	51 11       	cpse	r21, r1
    1340:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
    1344:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_nan>

00001348 <__divsf3x>:
    1348:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_split3>
    134c:	68 f3       	brcs	.-38     	; 0x1328 <__divsf3+0x8>

0000134e <__divsf3_pse>:
    134e:	99 23       	and	r25, r25
    1350:	b1 f3       	breq	.-20     	; 0x133e <__divsf3+0x1e>
    1352:	55 23       	and	r21, r21
    1354:	91 f3       	breq	.-28     	; 0x133a <__divsf3+0x1a>
    1356:	95 1b       	sub	r25, r21
    1358:	55 0b       	sbc	r21, r21
    135a:	bb 27       	eor	r27, r27
    135c:	aa 27       	eor	r26, r26
    135e:	62 17       	cp	r22, r18
    1360:	73 07       	cpc	r23, r19
    1362:	84 07       	cpc	r24, r20
    1364:	38 f0       	brcs	.+14     	; 0x1374 <__divsf3_pse+0x26>
    1366:	9f 5f       	subi	r25, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	44 1f       	adc	r20, r20
    1370:	aa 1f       	adc	r26, r26
    1372:	a9 f3       	breq	.-22     	; 0x135e <__divsf3_pse+0x10>
    1374:	35 d0       	rcall	.+106    	; 0x13e0 <__divsf3_pse+0x92>
    1376:	0e 2e       	mov	r0, r30
    1378:	3a f0       	brmi	.+14     	; 0x1388 <__divsf3_pse+0x3a>
    137a:	e0 e8       	ldi	r30, 0x80	; 128
    137c:	32 d0       	rcall	.+100    	; 0x13e2 <__divsf3_pse+0x94>
    137e:	91 50       	subi	r25, 0x01	; 1
    1380:	50 40       	sbci	r21, 0x00	; 0
    1382:	e6 95       	lsr	r30
    1384:	00 1c       	adc	r0, r0
    1386:	ca f7       	brpl	.-14     	; 0x137a <__divsf3_pse+0x2c>
    1388:	2b d0       	rcall	.+86     	; 0x13e0 <__divsf3_pse+0x92>
    138a:	fe 2f       	mov	r31, r30
    138c:	29 d0       	rcall	.+82     	; 0x13e0 <__divsf3_pse+0x92>
    138e:	66 0f       	add	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	bb 1f       	adc	r27, r27
    1396:	26 17       	cp	r18, r22
    1398:	37 07       	cpc	r19, r23
    139a:	48 07       	cpc	r20, r24
    139c:	ab 07       	cpc	r26, r27
    139e:	b0 e8       	ldi	r27, 0x80	; 128
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <__divsf3_pse+0x56>
    13a2:	bb 0b       	sbc	r27, r27
    13a4:	80 2d       	mov	r24, r0
    13a6:	bf 01       	movw	r22, r30
    13a8:	ff 27       	eor	r31, r31
    13aa:	93 58       	subi	r25, 0x83	; 131
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	3a f0       	brmi	.+14     	; 0x13be <__divsf3_pse+0x70>
    13b0:	9e 3f       	cpi	r25, 0xFE	; 254
    13b2:	51 05       	cpc	r21, r1
    13b4:	78 f0       	brcs	.+30     	; 0x13d4 <__divsf3_pse+0x86>
    13b6:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__fp_inf>
    13ba:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__fp_szero>
    13be:	5f 3f       	cpi	r21, 0xFF	; 255
    13c0:	e4 f3       	brlt	.-8      	; 0x13ba <__divsf3_pse+0x6c>
    13c2:	98 3e       	cpi	r25, 0xE8	; 232
    13c4:	d4 f3       	brlt	.-12     	; 0x13ba <__divsf3_pse+0x6c>
    13c6:	86 95       	lsr	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	b7 95       	ror	r27
    13ce:	f7 95       	ror	r31
    13d0:	9f 5f       	subi	r25, 0xFF	; 255
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <__divsf3_pse+0x78>
    13d4:	88 0f       	add	r24, r24
    13d6:	91 1d       	adc	r25, r1
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret
    13e0:	e1 e0       	ldi	r30, 0x01	; 1
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	bb 1f       	adc	r27, r27
    13ea:	62 17       	cp	r22, r18
    13ec:	73 07       	cpc	r23, r19
    13ee:	84 07       	cpc	r24, r20
    13f0:	ba 07       	cpc	r27, r26
    13f2:	20 f0       	brcs	.+8      	; 0x13fc <__divsf3_pse+0xae>
    13f4:	62 1b       	sub	r22, r18
    13f6:	73 0b       	sbc	r23, r19
    13f8:	84 0b       	sbc	r24, r20
    13fa:	ba 0b       	sbc	r27, r26
    13fc:	ee 1f       	adc	r30, r30
    13fe:	88 f7       	brcc	.-30     	; 0x13e2 <__divsf3_pse+0x94>
    1400:	e0 95       	com	r30
    1402:	08 95       	ret

00001404 <__udivmodhi4>:
    1404:	aa 1b       	sub	r26, r26
    1406:	bb 1b       	sub	r27, r27
    1408:	51 e1       	ldi	r21, 0x11	; 17
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__udivmodhi4_ep>

0000140c <__udivmodhi4_loop>:
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	a6 17       	cp	r26, r22
    1412:	b7 07       	cpc	r27, r23
    1414:	10 f0       	brcs	.+4      	; 0x141a <__udivmodhi4_ep>
    1416:	a6 1b       	sub	r26, r22
    1418:	b7 0b       	sbc	r27, r23

0000141a <__udivmodhi4_ep>:
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	5a 95       	dec	r21
    1420:	a9 f7       	brne	.-22     	; 0x140c <__udivmodhi4_loop>
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	08 95       	ret

0000142c <__divmodhi4>:
    142c:	97 fb       	bst	r25, 7
    142e:	07 2e       	mov	r0, r23
    1430:	16 f4       	brtc	.+4      	; 0x1436 <__divmodhi4+0xa>
    1432:	00 94       	com	r0
    1434:	07 d0       	rcall	.+14     	; 0x1444 <__divmodhi4_neg1>
    1436:	77 fd       	sbrc	r23, 7
    1438:	09 d0       	rcall	.+18     	; 0x144c <__divmodhi4_neg2>
    143a:	0e 94 02 0a 	call	0x1404	; 0x1404 <__udivmodhi4>
    143e:	07 fc       	sbrc	r0, 7
    1440:	05 d0       	rcall	.+10     	; 0x144c <__divmodhi4_neg2>
    1442:	3e f4       	brtc	.+14     	; 0x1452 <__divmodhi4_exit>

00001444 <__divmodhi4_neg1>:
    1444:	90 95       	com	r25
    1446:	81 95       	neg	r24
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	08 95       	ret

0000144c <__divmodhi4_neg2>:
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255

00001452 <__divmodhi4_exit>:
    1452:	08 95       	ret

00001454 <__tablejump2__>:
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	05 90       	lpm	r0, Z+
    145a:	f4 91       	lpm	r31, Z
    145c:	e0 2d       	mov	r30, r0
    145e:	09 94       	ijmp

00001460 <_exit>:
    1460:	f8 94       	cli

00001462 <__stop_program>:
    1462:	ff cf       	rjmp	.-2      	; 0x1462 <__stop_program>
